apiVersion: v1
items:
- apiVersion: v1
  data:
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    OTEL_SERVICE_NAME: annotations
    REFLECT_COMPONENT: annotations
    REFLECT_ENVIRONMENT: Production
    REFLECTANNOTATIONS_Multiplayer__Address: https://multiplayer-develop.opr.unity.com
    REFLECTANNOTATIONS_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTANNOTATIONS_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTANNOTATIONS_Prometheus__Enabled: "true"
    REFLECTANNOTATIONS_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-01-16T18:28:45Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: annotations
      helm.sh/chart: reflect-common-chart-1.0.0
    name: annotations-config
    namespace: opr-develop
    resourceVersion: "193319491"
    uid: ae7289d3-7815-4c30-a528-ae7e5695f08f
- apiVersion: v1
  data:
    REACT_APP_BIM360_SERVER_ENV: local
    REACT_APP_CLOUD_PROVIDER: gcp
    REACT_APP_COMPONENT_NAME: WebDashboard
    REACT_APP_ENABLE_APRIL_2021_FEATURES: "true"
    REACT_APP_IS_ON_PREM_REFLECT: "true"
    REACT_APP_ON_PREM_REFLECT_ENTERPRISE_DOMAIN: BAH OPR
    REACT_APP_PROJECT_SERVER_ADDRESS: https://develop.opr.unity.com
    REACT_APP_PROJECT_SERVER_ENV: develop
    REACT_APP_PROJECT_SERVER_HTTP_ADDRESS: https://develop.opr.unity.com
    REACT_APP_SENTRY_ENABLED: "false"
    REACT_APP_UNITY_API_ADDRESS: ""
    REACT_APP_UNITY_ID_ADDRESS: ""
    REFLECT_DOMAIN: BAH OPR
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-04-02T16:35:45Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: commonui
      helm.sh/chart: reflect-common-chart-1.0.0
    name: commonui-config
    namespace: opr-develop
    resourceVersion: "197769618"
    uid: f6edaaa1-bcd6-44e3-988c-4a1c0bbf9fd2
- apiVersion: v1
  data:
    00-ProjectServiceUser.sh: "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username
      \"$POSTGRES_USER\" <<-EOSQL\n\tCREATE USER project_service WITH ENCRYPTED PASSWORD
      '$PROJECT_SERVICE_DB_PASSWORD';\nEOSQL\n"
    01-ProjectService.sql: |
      --
      -- PostgreSQL database dump
      --

      -- Dumped from database version 11.14
      -- Dumped by pg_dump version 11.14

      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;

      --
      -- Name: ProjectService; Type: DATABASE; Schema: -; Owner: project_service
      --

      CREATE DATABASE "ProjectService" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';

      GRANT ALL PRIVILEGES ON DATABASE "ProjectService" TO project_service;

      ALTER DATABASE "ProjectService" OWNER TO project_service;

      \connect "ProjectService" project_service

      SET SCHEMA 'public';


      -- The following script was generated by running `dotnet ef migrations script --idempotent`
      -- with a few syntax corrections:
      --    - add semicolon to end of CREATE RULE and DROP RULE commands
      --    - change `SELECT * FROM setval(..)` to `PERFORM setval(..)`
      --    - add semicolon to end of `INSERT INTO "SyncServerAddresses"...`

      CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
          "MigrationId" character varying(150) NOT NULL,
          "ProductVersion" character varying(32) NOT NULL,
          CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
      );


      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          CREATE TABLE "SyncServers" (
              "Id" bigserial NOT NULL,
              "UUID" uuid NOT NULL,
              "UserId" character varying(64) NOT NULL,
              "UserName" character varying(128) NOT NULL,
              "EndpointAddress" character varying(256) NOT NULL,
              "MachineName" character varying(256) NOT NULL,
              "PublicIP" character varying(32) NOT NULL,
              "IsShared" boolean NOT NULL,
              "LastKeepAlive" timestamp without time zone NOT NULL,
              CONSTRAINT "PK_SyncServers" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          CREATE TABLE "SyncServerOrganizations" (
              "OrgId" character varying(64) NOT NULL,
              "SyncServerId" bigint NOT NULL,
              CONSTRAINT "PK_SyncServerOrganizations" PRIMARY KEY ("SyncServerId", "OrgId"),
              CONSTRAINT "FK_SyncServerOrganizations_SyncServers_SyncServerId" FOREIGN KEY ("SyncServerId") REFERENCES "SyncServers" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          CREATE TABLE "SyncServerProjects" (
              "ProjectId" character varying(64) NOT NULL,
              "SyncServerId" bigint NOT NULL,
              CONSTRAINT "PK_SyncServerProjects" PRIMARY KEY ("SyncServerId", "ProjectId"),
              CONSTRAINT "FK_SyncServerProjects_SyncServers_SyncServerId" FOREIGN KEY ("SyncServerId") REFERENCES "SyncServers" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          CREATE INDEX "IX_SyncServers_PublicIP" ON "SyncServers" ("PublicIP");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_SyncServers_UUID" ON "SyncServers" ("UUID");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190820173657_InitialCreate') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20190820173657_InitialCreate', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          DROP INDEX "IX_SyncServers_PublicIP";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          ALTER TABLE "SyncServers" DROP COLUMN "PublicIP";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          CREATE TABLE "SyncServerAddresses" (
              "SyncServerId" bigint NOT NULL,
              "EndpointAddress" character varying(256) NOT NULL,
              CONSTRAINT "PK_SyncServerAddresses" PRIMARY KEY ("SyncServerId", "EndpointAddress"),
              CONSTRAINT "FK_SyncServerAddresses_SyncServers_SyncServerId" FOREIGN KEY ("SyncServerId") REFERENCES "SyncServers" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          INSERT INTO "SyncServerAddresses" ("SyncServerId", "EndpointAddress") SELECT "Id", "EndpointAddress" from "SyncServers";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          ALTER TABLE "SyncServers" DROP COLUMN "EndpointAddress";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20190926185753_MultipleServiceAddresses') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20190926185753_MultipleServiceAddresses', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20191216191901_CloudSyncData') THEN
          INSERT INTO "SyncServers" ("Id", "IsShared", "LastKeepAlive", "MachineName", "UUID", "UserId", "UserName")
          VALUES (1, TRUE, TIMESTAMP '9999-12-31 23:59:59.999999', 'Cloud', 'ffffffff-ffff-ffff-ffff-ffffffffffff', '', '');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20191216191901_CloudSyncData') THEN
          CREATE RULE protect_cloud_sync_update AS ON UPDATE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20191216191901_CloudSyncData') THEN
          CREATE RULE protect_cloud_sync_delete AS ON DELETE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20191216191901_CloudSyncData') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20191216191901_CloudSyncData', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          ALTER TABLE "SyncServerProjects" DROP CONSTRAINT "PK_SyncServerProjects";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          ALTER TABLE "SyncServerProjects" ADD "Id" bigserial NOT NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          ALTER TABLE "SyncServerProjects" ADD CONSTRAINT "PK_SyncServerProjects" PRIMARY KEY ("Id");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          CREATE TABLE "SyncServerProjectSources" (
              "Id" bigserial NOT NULL,
              "SyncServerProjectId" bigint NOT NULL,
              "SourceId" character varying(128) NOT NULL,
              "FlaggedForDeletion" timestamp without time zone NULL,
              "LastPublished" timestamp without time zone NOT NULL,
              CONSTRAINT "PK_SyncServerProjectSources" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncServerProjectSources_SyncServerProjects_SyncServerProje~" FOREIGN KEY ("SyncServerProjectId") REFERENCES "SyncServerProjects" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          CREATE UNIQUE INDEX "IX_SyncServerProjects_SyncServerId_ProjectId" ON "SyncServerProjects" ("SyncServerId", "ProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          CREATE UNIQUE INDEX "IX_SyncServerProjectSources_SyncServerProjectId_SourceId" ON "SyncServerProjectSources" ("SyncServerProjectId", "SourceId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200304151950_AddSyncServerProjectSource') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200304151950_AddSyncServerProjectSource', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200324113914_AddSyncServerOnlineStatus') THEN
          ALTER TABLE "SyncServers" ADD "IsOnline" boolean NOT NULL DEFAULT TRUE;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200324113914_AddSyncServerOnlineStatus') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200324113914_AddSyncServerOnlineStatus', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200331172407_AddSourceMetadata') THEN
          ALTER TABLE "SyncServerProjectSources" ADD "PluginName" character varying(128) NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200331172407_AddSourceMetadata') THEN
          ALTER TABLE "SyncServerProjectSources" ADD "PluginVersion" character varying(32) NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200331172407_AddSourceMetadata') THEN
          ALTER TABLE "SyncServerProjectSources" ADD "SourceName" character varying(128) NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200331172407_AddSourceMetadata') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200331172407_AddSourceMetadata') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200331172407_AddSourceMetadata', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          DROP RULE protect_cloud_sync_update ON "SyncServers";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          DROP RULE protect_cloud_sync_delete ON "SyncServers";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          ALTER TABLE "SyncServers" ALTER COLUMN "Id" TYPE bigint;
          ALTER TABLE "SyncServers" ALTER COLUMN "Id" SET NOT NULL;
          ALTER SEQUENCE "SyncServers_Id_seq" RENAME TO "SyncServers_Id_old_seq";
          ALTER TABLE "SyncServers" ALTER COLUMN "Id" DROP DEFAULT;
          ALTER TABLE "SyncServers" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY;
          PERFORM setval('"SyncServers_Id_seq"', nextval('"SyncServers_Id_old_seq"'), false);
          DROP SEQUENCE "SyncServers_Id_old_seq";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          CREATE RULE protect_cloud_sync_update AS ON UPDATE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          CREATE RULE protect_cloud_sync_delete AS ON DELETE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "Id" TYPE bigint;
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "Id" SET NOT NULL;
          ALTER SEQUENCE "SyncServerProjectSources_Id_seq" RENAME TO "SyncServerProjectSources_Id_old_seq";
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "Id" DROP DEFAULT;
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY;
          PERFORM setval('"SyncServerProjectSources_Id_seq"', nextval('"SyncServerProjectSources_Id_old_seq"'), false);
          DROP SEQUENCE "SyncServerProjectSources_Id_old_seq";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          ALTER TABLE "SyncServerProjects" ALTER COLUMN "Id" TYPE bigint;
          ALTER TABLE "SyncServerProjects" ALTER COLUMN "Id" SET NOT NULL;
          ALTER SEQUENCE "SyncServerProjects_Id_seq" RENAME TO "SyncServerProjects_Id_old_seq";
          ALTER TABLE "SyncServerProjects" ALTER COLUMN "Id" DROP DEFAULT;
          ALTER TABLE "SyncServerProjects" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY;
          PERFORM setval('"SyncServerProjects_Id_seq"', nextval('"SyncServerProjects_Id_old_seq"'), false);
          DROP SEQUENCE "SyncServerProjects_Id_old_seq";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200608141531_IdentityColumn') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200608141531_IdentityColumn', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200709201857_AddAllowPublishNewProjects') THEN
          ALTER TABLE "SyncServers" ADD "AllowPublishNewProjects" boolean NOT NULL DEFAULT FALSE;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200709201857_AddAllowPublishNewProjects') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200709201857_AddAllowPublishNewProjects', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          ALTER TABLE "SyncServers" ALTER COLUMN "UserName" TYPE character varying(512);
          ALTER TABLE "SyncServers" ALTER COLUMN "UserName" SET NOT NULL;
          ALTER TABLE "SyncServers" ALTER COLUMN "UserName" DROP DEFAULT;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceName" TYPE character varying(512);
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceName" DROP NOT NULL;
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceName" DROP DEFAULT;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceId" TYPE character varying(512);
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceId" SET NOT NULL;
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "SourceId" DROP DEFAULT;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "PluginName" TYPE character varying(512);
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "PluginName" DROP NOT NULL;
          ALTER TABLE "SyncServerProjectSources" ALTER COLUMN "PluginName" DROP DEFAULT;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210112132819_IncreaseVarcharLength') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210112132819_IncreaseVarcharLength', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210113184742_LinkSharing') THEN
          CREATE TABLE "Links" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "Token" character varying(45) NOT NULL,
              "SyncServerUuid" uuid NOT NULL,
              "SyncServerProjectId" character varying(64) NOT NULL,
              "CreationTimestamp" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
              CONSTRAINT "PK_Links" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210113184742_LinkSharing') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210113184742_LinkSharing') THEN
          CREATE UNIQUE INDEX "IX_Links_Token" ON "Links" ("Token");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210113184742_LinkSharing') THEN
          CREATE UNIQUE INDEX "IX_Links_SyncServerUuid_SyncServerProjectId" ON "Links" ("SyncServerUuid", "SyncServerProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210113184742_LinkSharing') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210113184742_LinkSharing', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185243_TimestampUTC') THEN
          ALTER TABLE "Links" ALTER COLUMN "CreationTimestamp" TYPE timestamp without time zone;
          ALTER TABLE "Links" ALTER COLUMN "CreationTimestamp" SET NOT NULL;
          ALTER TABLE "Links" ALTER COLUMN "CreationTimestamp" SET DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185243_TimestampUTC') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185243_TimestampUTC') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210118185243_TimestampUTC', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210309135641_PublicLinks') THEN
          CREATE TYPE link_permission_data AS ENUM ('private', 'public');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210309135641_PublicLinks') THEN
          ALTER TABLE "Links" ADD "Permission" link_permission_data NOT NULL DEFAULT 'private'::link_permission_data;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210309135641_PublicLinks') THEN
          UPDATE "SyncServers" SET "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210309135641_PublicLinks') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210309135641_PublicLinks', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          DROP RULE protect_cloud_sync_update ON "SyncServers";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          DROP RULE protect_cloud_sync_delete ON "SyncServers";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          CREATE RULE protect_cloud_sync_update AS ON UPDATE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          CREATE RULE protect_cloud_sync_delete AS ON DELETE TO "SyncServers" WHERE old."Id" = 1 DO INSTEAD nothing;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210310182829_CloudSyncAllowNewProjects') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210310182829_CloudSyncAllowNewProjects', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          CREATE TABLE "OrgSeats" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "EntitlementType" text NOT NULL,
              "OrgId" text NOT NULL,
              CONSTRAINT "PK_OrgSeats" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          CREATE TABLE "OrgSeatAllocations" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "Uid" uuid NOT NULL,
              "OrgSeatId" bigint NOT NULL,
              "LastKeepAlive" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "ExpiryDate" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "DisplayName" text NOT NULL,
              CONSTRAINT "PK_OrgSeatAllocations" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_OrgSeatAllocations_OrgSeats_OrgSeatId" FOREIGN KEY ("OrgSeatId") REFERENCES "OrgSeats" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          CREATE INDEX "IX_OrgSeatAllocations_OrgSeatId" ON "OrgSeatAllocations" ("OrgSeatId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          CREATE UNIQUE INDEX "IX_OrgSeatAllocations_Uid" ON "OrgSeatAllocations" ("Uid");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          CREATE UNIQUE INDEX "IX_OrgSeats_OrgId_EntitlementType" ON "OrgSeats" ("OrgId", "EntitlementType");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210513143458_FloatingSeats') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210513143458_FloatingSeats', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210713154249_AddHttpEndpoints') THEN
          ALTER TABLE "SyncServerAddresses" ADD "Protocol" integer NOT NULL DEFAULT 0;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210713154249_AddHttpEndpoints') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210713154249_AddHttpEndpoints', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210812194951_FloatingSeatsUpdate') THEN
          ALTER TABLE "OrgSeatAllocations" ADD "UserId" text NOT NULL DEFAULT '';
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210812194951_FloatingSeatsUpdate') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210812194951_FloatingSeatsUpdate') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210812194951_FloatingSeatsUpdate', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          ALTER TABLE "OrgSeatAllocations" DROP COLUMN "ExpiryDate";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          ALTER TABLE "OrgSeatAllocations" DROP COLUMN "LastKeepAlive";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          CREATE TABLE "OrgSeatDevices" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "OrgSeatAllocationId" bigint NOT NULL,
              "TraceId" text NOT NULL,
              "LastKeepAlive" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "ExpiryDate" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              CONSTRAINT "PK_OrgSeatDevices" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_OrgSeatDevices_OrgSeatAllocations_OrgSeatAllocationId" FOREIGN KEY ("OrgSeatAllocationId") REFERENCES "OrgSeatAllocations" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          CREATE UNIQUE INDEX "IX_OrgSeatDevices_OrgSeatAllocationId_TraceId" ON "OrgSeatDevices" ("OrgSeatAllocationId", "TraceId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210909182207_FloatingSeatsTraceId') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210909182207_FloatingSeatsTraceId', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211109150333_ApiKeys') THEN
          CREATE TABLE "ApiKeys" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "Uid" text NOT NULL,
              "Salt" bytea NOT NULL,
              "Hash" bytea NOT NULL,
              "HashAlgorithm" text NOT NULL,
              "Iterations" integer NOT NULL,
              "UserId" text NOT NULL,
              "UserComment" character varying(140) NOT NULL,
              "CreationTimestamp" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "OriginalIssuer" text NOT NULL,
              CONSTRAINT "PK_ApiKeys" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211109150333_ApiKeys') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211109150333_ApiKeys') THEN
          CREATE UNIQUE INDEX "IX_ApiKeys_Uid" ON "ApiKeys" ("Uid");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211109150333_ApiKeys') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20211109150333_ApiKeys', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE TABLE "DeployApps" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "ReflectAppId" uuid NOT NULL,
              "AppName" text NOT NULL,
              "UserId" character varying(64) NOT NULL,
              "ClientId" character varying(128) NOT NULL,
              "ValidIssuer" character varying(128) NOT NULL,
              "Domain" character varying(128) NOT NULL,
              "ViewerProtocol" character varying(128) NOT NULL,
              "OAuthLoginEndpoint" character varying(128) NOT NULL,
              "OAuthLogoutEndpoint" character varying(128) NOT NULL,
              "OAuthGetTokenEndpoint" character varying(128) NOT NULL,
              "OAuthRefreshTokenEndpoint" character varying(128) NOT NULL,
              "OAuthPublicKey" text NOT NULL,
              CONSTRAINT "PK_DeployApps" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE TABLE "DeployAppOrgs" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "Name" character varying(256) NOT NULL,
              "DeployAppId" bigint NOT NULL,
              CONSTRAINT "PK_DeployAppOrgs" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployAppOrgs_DeployApps_DeployAppId" FOREIGN KEY ("DeployAppId") REFERENCES "DeployApps" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE TABLE "DeployAppViewerBundleIds" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "DeployAppId1" bigint NOT NULL,
              "BundleId" text NOT NULL,
              "Platform" text NOT NULL,
              CONSTRAINT "PK_DeployAppViewerBundleIds" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployAppViewerBundleIds_DeployApps_DeployAppId1" FOREIGN KEY ("DeployAppId1") REFERENCES "DeployApps" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE TABLE "DeployAppProjects" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "DeployAppOrgId" bigint NOT NULL,
              "ReflectProjectId" uuid NOT NULL,
              "Name" character varying(256) NOT NULL,
              "ExternalId" character varying(256) NOT NULL,
              CONSTRAINT "PK_DeployAppProjects" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployAppProjects_DeployAppOrgs_DeployAppOrgId" FOREIGN KEY ("DeployAppOrgId") REFERENCES "DeployAppOrgs" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE INDEX "IX_DeployAppOrgs_DeployAppId" ON "DeployAppOrgs" ("DeployAppId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployAppOrgs_Name_DeployAppId" ON "DeployAppOrgs" ("Name", "DeployAppId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE INDEX "IX_DeployAppProjects_DeployAppOrgId" ON "DeployAppProjects" ("DeployAppOrgId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployAppProjects_ReflectProjectId" ON "DeployAppProjects" ("ReflectProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployAppProjects_ExternalId_DeployAppOrgId" ON "DeployAppProjects" ("ExternalId", "DeployAppOrgId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployApps_Domain" ON "DeployApps" ("Domain");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployApps_ReflectAppId" ON "DeployApps" ("ReflectAppId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployApps_ViewerProtocol" ON "DeployApps" ("ViewerProtocol");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE INDEX "IX_DeployAppViewerBundleIds_DeployAppId1" ON "DeployAppViewerBundleIds" ("DeployAppId1");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          CREATE UNIQUE INDEX "IX_DeployAppViewerBundleIds_BundleId_Platform" ON "DeployAppViewerBundleIds" ("BundleId", "Platform");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220127210136_AddDeployApps') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220127210136_AddDeployApps', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220203140213_DeviceLogin') THEN
          CREATE TABLE "DeviceLoginCodes" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "UserCode" character varying(6) NOT NULL,
              "DeviceCode" character varying(40) NOT NULL,
              "Expiry" timestamp without time zone NOT NULL,
              "ActivatedOn" timestamp without time zone NULL,
              "UserId" text NULL,
              "Issuer" text NULL,
              CONSTRAINT "PK_DeviceLoginCodes" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220203140213_DeviceLogin') THEN
          UPDATE "SyncServers" SET "AllowPublishNewProjects" = TRUE, "IsOnline" = TRUE
          WHERE "Id" = 1;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220203140213_DeviceLogin') THEN
          CREATE UNIQUE INDEX "IX_DeviceLoginCodes_DeviceCode" ON "DeviceLoginCodes" ("DeviceCode");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220203140213_DeviceLogin') THEN
          CREATE UNIQUE INDEX "IX_DeviceLoginCodes_UserCode" ON "DeviceLoginCodes" ("UserCode");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220203140213_DeviceLogin') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220203140213_DeviceLogin', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          DROP TABLE "DeployAppProjects";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          DROP TABLE "DeployAppViewerBundleIds";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          DROP TABLE "DeployAppOrgs";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          DROP TABLE "DeployApps";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          ALTER TABLE "SyncServers" ALTER COLUMN "UserId" TYPE character varying(256);
          ALTER TABLE "SyncServers" ALTER COLUMN "UserId" SET NOT NULL;
          ALTER TABLE "SyncServers" ALTER COLUMN "UserId" DROP DEFAULT;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE TABLE "DeployIdPs" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "ReflectDeployIdP" uuid NOT NULL,
              "AppName" text NOT NULL,
              "UserId" character varying(256) NOT NULL,
              "ClientId" character varying(128) NOT NULL,
              "ValidIssuer" character varying(128) NOT NULL,
              "Domain" character varying(128) NOT NULL,
              "ViewerProtocol" character varying(128) NOT NULL,
              "OAuthLoginEndpoint" character varying(128) NOT NULL,
              "OAuthLogoutEndpoint" character varying(128) NULL,
              "OAuthGetTokenEndpoint" character varying(128) NOT NULL,
              "OAuthRefreshTokenEndpoint" character varying(128) NULL,
              "OAuthPublicKey" text NOT NULL,
              CONSTRAINT "PK_DeployIdPs" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE TABLE "DeployIdPOrgs" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "OrgId" character varying(64) NOT NULL,
              "Name" character varying(256) NOT NULL,
              "Archived" boolean NOT NULL,
              "DeployIdPId" bigint NOT NULL,
              CONSTRAINT "PK_DeployIdPOrgs" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployIdPOrgs_DeployIdPs_DeployIdPId" FOREIGN KEY ("DeployIdPId") REFERENCES "DeployIdPs" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE TABLE "DeployIdPViewerBundleIds" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "DeployIdPId1" bigint NOT NULL,
              "BundleId" text NOT NULL,
              "Platform" text NOT NULL,
              CONSTRAINT "PK_DeployIdPViewerBundleIds" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployIdPViewerBundleIds_DeployIdPs_DeployIdPId1" FOREIGN KEY ("DeployIdPId1") REFERENCES "DeployIdPs" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE TABLE "DeployIdPProjects" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "DeployIdPOrgId" bigint NOT NULL,
              "ProjectId" character varying(64) NOT NULL,
              "Name" character varying(256) NOT NULL,
              "Archived" boolean NOT NULL,
              CONSTRAINT "PK_DeployIdPProjects" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_DeployIdPProjects_DeployIdPOrgs_DeployIdPOrgId" FOREIGN KEY ("DeployIdPOrgId") REFERENCES "DeployIdPOrgs" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPOrgs_DeployIdPId_OrgId" ON "DeployIdPOrgs" ("DeployIdPId", "OrgId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPProjects_DeployIdPOrgId_ProjectId" ON "DeployIdPProjects" ("DeployIdPOrgId", "ProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPs_Domain" ON "DeployIdPs" ("Domain");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPs_ReflectDeployIdP" ON "DeployIdPs" ("ReflectDeployIdP");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPs_ViewerProtocol" ON "DeployIdPs" ("ViewerProtocol");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE INDEX "IX_DeployIdPViewerBundleIds_DeployIdPId1" ON "DeployIdPViewerBundleIds" ("DeployIdPId1");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPViewerBundleIds_BundleId_Platform" ON "DeployIdPViewerBundleIds" ("BundleId", "Platform");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220214135153_DeployAppTweaks') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220214135153_DeployAppTweaks', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301010657_DeviceSessionsRename') THEN
          DROP TABLE "DeviceLoginCodes";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301010657_DeviceSessionsRename') THEN
          CREATE TABLE "DeviceSessions" (
              "Id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              "UserCode" character varying(6) NOT NULL,
              "DeviceCode" character varying(40) NOT NULL,
              "UserCodeExpiry" timestamp without time zone NOT NULL,
              "ActivatedOn" timestamp without time zone NULL,
              "UserId" text NULL,
              "Issuer" text NULL,
              "Type" text NOT NULL,
              "Name" text NOT NULL,
              "Model" text NOT NULL,
              CONSTRAINT "PK_DeviceSessions" PRIMARY KEY ("Id")
          );
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301010657_DeviceSessionsRename') THEN
          CREATE UNIQUE INDEX "IX_DeviceSessions_DeviceCode" ON "DeviceSessions" ("DeviceCode");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301010657_DeviceSessionsRename') THEN
          CREATE UNIQUE INDEX "IX_DeviceSessions_UserCode" ON "DeviceSessions" ("UserCode") WHERE "ActivatedOn" is Null;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301010657_DeviceSessionsRename') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220301010657_DeviceSessionsRename', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          DROP INDEX "IX_DeployIdPProjects_DeployIdPOrgId_ProjectId";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          ALTER TABLE "DeployIdPProjects" DROP COLUMN "ProjectId";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          ALTER TABLE "DeployIdPProjects" ADD "ExternalProjectId" character varying(64) NOT NULL DEFAULT '';
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          ALTER TABLE "DeployIdPProjects" ADD "GloballyUniqueProjectId" text NOT NULL DEFAULT '';
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPProjects_GloballyUniqueProjectId" ON "DeployIdPProjects" ("GloballyUniqueProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPProjects_DeployIdPOrgId_ExternalProjectId" ON "DeployIdPProjects" ("DeployIdPOrgId", "ExternalProjectId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301011307_DeployIdpUniqueProjectId') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220301011307_DeployIdpUniqueProjectId', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          ALTER TABLE "DeployIdPs" DROP COLUMN "OAuthPublicKey";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          ALTER TABLE "DeployIdPs" ADD "ClientIdClaim" text NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          ALTER TABLE "DeployIdPs" ADD "CustomClaimPrefix" text NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          ALTER TABLE "DeployIdPs" ADD "OAuthJwkUrl" character varying(128) NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          ALTER TABLE "DeployIdPs" ADD "OAuthUserInfoUrl" character varying(128) NULL;
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          CREATE UNIQUE INDEX "IX_DeployIdPs_ValidIssuer_ClientId" ON "DeployIdPs" ("ValidIssuer", "ClientId");
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301012013_DeployIdpTokenValidation') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220301012013_DeployIdpTokenValidation', '3.1.18');
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301153029_OAuthUrlTweaks') THEN
          ALTER TABLE "DeployIdPs" RENAME COLUMN "OAuthLogoutEndpoint" TO "OAuthRevokeEndpoint";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301153029_OAuthUrlTweaks') THEN
          ALTER TABLE "DeployIdPs" RENAME COLUMN "OAuthLoginEndpoint" TO "OAuthAuthorizeEndpoint";
          END IF;
      END $$;

      DO $$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220301153029_OAuthUrlTweaks') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220301153029_OAuthUrlTweaks', '3.1.18');
          END IF;
      END $$;
    02-SyncServiceUser.sh: "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username
      \"$POSTGRES_USER\" <<-EOSQL\n\tCREATE USER sync_service WITH ENCRYPTED PASSWORD
      '$SYNC_SERVICE_DB_PASSWORD';\nEOSQL\n"
    03-SyncService.sql: |+
      --
      -- PostgreSQL database dump
      --

      -- Dumped from database version 11.20
      -- Dumped by pg_dump version 15.4

      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;

      --
      -- Name: SyncService; Type: DATABASE; Schema: -; Owner: sync_service
      --

      CREATE DATABASE "SyncService" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';
      ALTER DATABASE "SyncService" OWNER TO sync_service;

      CREATE DATABASE "SyncService_Hangfire" WITH OWNER sync_service;

      \connect "SyncService" sync_service

      SET SCHEMA 'public';

      -- The following script was generated by running `dotnet ef migrations script --context SyncServiceDbContextPostgres --idempotent`

      CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
          "MigrationId" character varying(150) NOT NULL,
          "ProductVersion" character varying(32) NOT NULL,
          CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
      );

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "AdminData" (
              "Key" character varying(128) NOT NULL,
              "Value" bytea NOT NULL,
              "Expiry" timestamp without time zone NOT NULL,
              CONSTRAINT "PK_AdminData" PRIMARY KEY ("Key")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "ProjectSources" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "ProjectId" character varying(64) NOT NULL,
              "SourceId" character varying(128) NOT NULL,
              "SourceName" character varying(128) NULL,
              "PluginName" character varying(128) NULL,
              "PluginVersion" character varying(32) NULL,
              CONSTRAINT "PK_ProjectSources" PRIMARY KEY ("Id")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "ProjectSourceManifests" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "CreatedTs" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
              "CommittedTs" timestamp without time zone NULL,
              "RegistrationStatus" integer NOT NULL,
              "ProjectSourceId" bigint NOT NULL,
              "SourceManifestId" bigint NULL,
              CONSTRAINT "PK_ProjectSourceManifests" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_ProjectSourceManifests_ProjectSources_ProjectSourceId" FOREIGN KEY ("ProjectSourceId") REFERENCES "ProjectSources" ("Id") ON DELETE CASCADE,
              CONSTRAINT "FK_ProjectSourceManifests_ProjectSourceManifests_SourceManifes~" FOREIGN KEY ("SourceManifestId") REFERENCES "ProjectSourceManifests" ("Id") ON DELETE RESTRICT
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "ProjectSourceManifestEntries" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "ProjectSourceManifestId" bigint NOT NULL,
              "EntryType" integer NOT NULL,
              "AssetType" integer NOT NULL,
              "PersistentKey" character varying(2080) NOT NULL,
              "ManifestEntryData" bytea NULL,
              CONSTRAINT "PK_ProjectSourceManifestEntries" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_ProjectSourceManifestEntries_ProjectSourceManifests_Project~" FOREIGN KEY ("ProjectSourceManifestId") REFERENCES "ProjectSourceManifests" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "SyncSessions" (
              "Id" integer GENERATED BY DEFAULT AS IDENTITY,
              "SessionId" uuid NOT NULL,
              "CurrentTransactionNumber" integer NOT NULL,
              "StartedTs" timestamp without time zone NOT NULL,
              "CompletedTs" timestamp without time zone NULL,
              "SessionContextData" bytea NULL,
              "CurrentManifestId" bigint NOT NULL,
              CONSTRAINT "PK_SyncSessions" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncSessions_ProjectSourceManifests_CurrentManifestId" FOREIGN KEY ("CurrentManifestId") REFERENCES "ProjectSourceManifests" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "SyncSessionAssets" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "SyncSessionId" integer NOT NULL,
              "AssetIdHash" bytea NOT NULL,
              "Hash" bytea NOT NULL,
              "AssetType" integer NOT NULL,
              "ProcessingStatus" integer NOT NULL,
              "TransactionNumber" integer NOT NULL,
              "Priority" integer NOT NULL,
              CONSTRAINT "PK_SyncSessionAssets" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncSessionAssets_SyncSessions_SyncSessionId" FOREIGN KEY ("SyncSessionId") REFERENCES "SyncSessions" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "SyncSessionRemovedObjectInstances" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "SyncSessionId" integer NOT NULL,
              "TransactionNumber" integer NOT NULL,
              "InstanceId" character varying(2048) NOT NULL,
              CONSTRAINT "PK_SyncSessionRemovedObjectInstances" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncSessionRemovedObjectInstances_SyncSessions_SyncSessionId" FOREIGN KEY ("SyncSessionId") REFERENCES "SyncSessions" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE TABLE "SyncSessionTransactions" (
              "Id" integer GENERATED BY DEFAULT AS IDENTITY,
              "SyncSessionId" integer NOT NULL,
              "TransactionId" uuid NOT NULL,
              "Status" integer NOT NULL,
              "CreatedOn" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
              "TransactionNumber" integer NOT NULL,
              "IsCancellationRequested" boolean NOT NULL,
              CONSTRAINT "PK_SyncSessionTransactions" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncSessionTransactions_SyncSessions_SyncSessionId" FOREIGN KEY ("SyncSessionId") REFERENCES "SyncSessions" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_ProjectSourceManifestEntries_ProjectSourceManifestId_Persis~" ON "ProjectSourceManifestEntries" ("ProjectSourceManifestId", "PersistentKey");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE INDEX "IX_ProjectSourceManifests_ProjectSourceId" ON "ProjectSourceManifests" ("ProjectSourceId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE INDEX "IX_ProjectSourceManifests_RegistrationStatus" ON "ProjectSourceManifests" ("RegistrationStatus");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE INDEX "IX_ProjectSourceManifests_SourceManifestId" ON "ProjectSourceManifests" ("SourceManifestId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_ProjectSources_ProjectId_SourceId" ON "ProjectSources" ("ProjectId", "SourceId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_AssetType~" ON "SyncSessionAssets" ("SyncSessionId", "TransactionNumber", "AssetType", "AssetIdHash");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionRemovedObjectInstances_SyncSessionId_Transaction~" ON "SyncSessionRemovedObjectInstances" ("SyncSessionId", "TransactionNumber", "InstanceId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE INDEX "IX_SyncSessions_CurrentManifestId" ON "SyncSessions" ("CurrentManifestId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_SyncSessions_SessionId" ON "SyncSessions" ("SessionId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE INDEX "IX_SyncSessionTransactions_SyncSessionId" ON "SyncSessionTransactions" ("SyncSessionId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionTransactions_TransactionId" ON "SyncSessionTransactions" ("TransactionId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200522152912_InitialCreate') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200522152912_InitialCreate', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          CREATE TABLE "SyncSessionRuleEngineGroupItems" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "SyncSessionId" integer NOT NULL,
              "RuleId" character varying(16) NOT NULL,
              "GroupKey" character varying(4096) NOT NULL,
              "ItemKey" character varying(2080) NOT NULL,
              "ItemType" integer NOT NULL,
              "ItemDataType" character varying(1024) NULL,
              "ItemData" bytea NULL,
              "DependenciesData" bytea NOT NULL,
              "ModifiedByTransactionNumber" integer NOT NULL,
              "IsRemoved" boolean NOT NULL,
              CONSTRAINT "PK_SyncSessionRuleEngineGroupItems" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_SyncSessionRuleEngineGroupItems_SyncSessions_SyncSessionId" FOREIGN KEY ("SyncSessionId") REFERENCES "SyncSessions" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          CREATE INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_Processin~" ON "SyncSessionAssets" ("SyncSessionId", "TransactionNumber", "ProcessingStatus", "Priority");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionRuleEngineGroupItems_SyncSessionId_RuleId_GroupK~" ON "SyncSessionRuleEngineGroupItems" ("SyncSessionId", "RuleId", "GroupKey") WHERE "ItemType" = 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionRuleEngineGroupItems_SyncSessionId_RuleId_ItemKey" ON "SyncSessionRuleEngineGroupItems" ("SyncSessionId", "RuleId", "ItemKey") WHERE "ItemType" = 1 AND "IsRemoved" = false;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionRuleEngineGroupItems_SyncSessionId_RuleId_Group~1" ON "SyncSessionRuleEngineGroupItems" ("SyncSessionId", "RuleId", "GroupKey", "ItemKey") WHERE "ItemType" = 1;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200528180810_AddRuleEngineGroupItems') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200528180810_AddRuleEngineGroupItems', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200609142603_IdentityColumn') THEN
          ALTER TABLE "SyncSessions" ALTER COLUMN "SessionContextData" SET NOT NULL;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20200609142603_IdentityColumn') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20200609142603_IdentityColumn', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          DROP INDEX "IX_SyncSessionTransactions_SyncSessionId";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          DROP INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_Processin~";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          CREATE TABLE "SyncSessionAssetNotificationThrottle" (
              "InsertTs" timestamp without time zone NOT NULL DEFAULT (date_trunc('second', now())),
              "SyncSessionId" integer NOT NULL,
              CONSTRAINT "PK_SyncSessionAssetNotificationThrottle" PRIMARY KEY ("SyncSessionId", "InsertTs")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionTransactions_SyncSessionId_TransactionNumber" ON "SyncSessionTransactions" ("SyncSessionId", "TransactionNumber");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          CREATE INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_Processin~" ON "SyncSessionAssets" ("SyncSessionId", "TransactionNumber", "ProcessingStatus");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20201130175720_SyncSessionIndexesAndNotificationThrottle') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20201130175720_SyncSessionIndexesAndNotificationThrottle', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185311_TimestampUTC') THEN
          ALTER TABLE "SyncSessionTransactions" ALTER COLUMN "CreatedOn" SET DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC');
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185311_TimestampUTC') THEN
          ALTER TABLE "ProjectSourceManifests" ALTER COLUMN "CreatedTs" SET DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC');
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210118185311_TimestampUTC') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210118185311_TimestampUTC', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210331181112_AddingAssetTypeToRemoveRootAssets') THEN
          DROP INDEX "IX_SyncSessionRemovedObjectInstances_SyncSessionId_Transaction~";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210331181112_AddingAssetTypeToRemoveRootAssets') THEN
          ALTER TABLE "SyncSessionRemovedObjectInstances" ADD "AssetType" integer NOT NULL DEFAULT 5;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210331181112_AddingAssetTypeToRemoveRootAssets') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionRemovedObjectInstances_SyncSessionId_Transaction~" ON "SyncSessionRemovedObjectInstances" ("SyncSessionId", "TransactionNumber", "InstanceId", "AssetType");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210331181112_AddingAssetTypeToRemoveRootAssets') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210331181112_AddingAssetTypeToRemoveRootAssets', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210510130616_SyncSessionAssetPersistentKey') THEN
          ALTER TABLE "SyncSessionAssets" ADD "PersistentKey" character varying(2080) NOT NULL DEFAULT '';
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210510130616_SyncSessionAssetPersistentKey') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210510130616_SyncSessionAssetPersistentKey', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210520191618_SyncSessionTransactionProgress') THEN
          ALTER TABLE "SyncSessionTransactions" ADD "ProcessedAssetsCount" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210520191618_SyncSessionTransactionProgress') THEN
          ALTER TABLE "SyncSessionTransactions" ADD "TotalAssetsCount" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210520191618_SyncSessionTransactionProgress') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210520191618_SyncSessionTransactionProgress', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210526011542_PurgeUnchangedEntriesFlag') THEN
          ALTER TABLE "ProjectSourceManifests" ADD "HasPurgedUnchangedEntries" boolean NOT NULL DEFAULT FALSE;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210526011542_PurgeUnchangedEntriesFlag') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210526011542_PurgeUnchangedEntriesFlag', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210818133456_SyncSessionStatus') THEN
          ALTER TABLE "SyncSessions" ADD "RetryCount" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210818133456_SyncSessionStatus') THEN
          ALTER TABLE "SyncSessions" ADD "Status" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210818133456_SyncSessionStatus') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210818133456_SyncSessionStatus', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          ALTER TABLE "ProjectSources" ADD "IsGenerated" boolean NOT NULL DEFAULT FALSE;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          ALTER TABLE "ProjectSourceManifests" ADD "RootNodeId" text NULL;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          ALTER TABLE "ProjectSourceManifests" ADD "Discriminator" text NOT NULL DEFAULT '';
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          CREATE TABLE "ProjectSourceRelatedManifests" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "SourceManifestId" bigint NOT NULL,
              "RelatedManifestId" bigint NOT NULL,
              CONSTRAINT "PK_ProjectSourceRelatedManifests" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_ProjectSourceRelatedManifests_ProjectSourceManifests_Relate~" FOREIGN KEY ("RelatedManifestId") REFERENCES "ProjectSourceManifests" ("Id") ON DELETE CASCADE,
              CONSTRAINT "FK_ProjectSourceRelatedManifests_ProjectSourceManifests_Source~" FOREIGN KEY ("SourceManifestId") REFERENCES "ProjectSourceManifests" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          CREATE INDEX "IX_ProjectSourceRelatedManifests_RelatedManifestId" ON "ProjectSourceRelatedManifests" ("RelatedManifestId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          CREATE UNIQUE INDEX "IX_ProjectSourceRelatedManifests_SourceManifestId_RelatedManif~" ON "ProjectSourceRelatedManifests" ("SourceManifestId", "RelatedManifestId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210819001839_HlodProjectSource') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210819001839_HlodProjectSource', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210914162305_SyncSessionUnchangedEntries') THEN
          CREATE TABLE "SyncSessionUnchangedAssets" (
              "SyncSessionId" integer NOT NULL,
              "PersistentKey" text NOT NULL,
              CONSTRAINT "PK_SyncSessionUnchangedAssets" PRIMARY KEY ("SyncSessionId", "PersistentKey"),
              CONSTRAINT "FK_SyncSessionUnchangedAssets_SyncSessions_SyncSessionId" FOREIGN KEY ("SyncSessionId") REFERENCES "SyncSessions" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210914162305_SyncSessionUnchangedEntries') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210914162305_SyncSessionUnchangedEntries', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210923165508_HlodConcurrencyToken') THEN
          ALTER TABLE "ProjectSourceManifests" ADD "ConcurrencyToken" integer NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210923165508_HlodConcurrencyToken') THEN
          CREATE UNIQUE INDEX "IX_ProjectSourceManifests_ProjectSourceId_ConcurrencyToken" ON "ProjectSourceManifests" ("ProjectSourceId", "ConcurrencyToken") WHERE "ConcurrencyToken" > 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210923165508_HlodConcurrencyToken') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210923165508_HlodConcurrencyToken', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211021182831_HasSpatializedObjectsFlag') THEN
          ALTER TABLE "ProjectSourceRelatedManifests" ADD "HasSpatializedObjects" boolean NOT NULL DEFAULT TRUE;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211021182831_HasSpatializedObjectsFlag') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20211021182831_HasSpatializedObjectsFlag', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211105194552_ProjectSourceManifestEntryAssetTypeIndex') THEN
          CREATE INDEX "IX_ProjectSourceManifestEntries_ProjectSourceManifestId_AssetT~" ON "ProjectSourceManifestEntries" ("ProjectSourceManifestId", "AssetType");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20211105194552_ProjectSourceManifestEntryAssetTypeIndex') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20211105194552_ProjectSourceManifestEntryAssetTypeIndex', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          DROP TABLE "SyncSessionAssetNotificationThrottle";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          DROP TABLE "SyncSessionUnchangedAssets";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          DROP INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_AssetType~";
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionTransactions" ADD "PendingAssetsCount" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionTransactions" ADD "ProcessingPhase" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionRuleEngineGroupItems" ADD "ProcessingStatus" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionRemovedObjectInstances" ADD "ProcessingStatus" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionAssets" ADD "ConcurrencyToken" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionAssets" ADD "DependencyResolutionPolicy" integer NOT NULL DEFAULT 0;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          ALTER TABLE "SyncSessionAssets" ADD "MissingDependency" character varying(2080) NOT NULL DEFAULT '';
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          CREATE UNIQUE INDEX "IX_SyncSessionAssets_SyncSessionId_TransactionNumber_Persisten~" ON "SyncSessionAssets" ("SyncSessionId", "TransactionNumber", "PersistentKey");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220121023500_MessageBroker') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220121023500_MessageBroker', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220318201033_ProjectSourceManifestSessionState') THEN
          ALTER TABLE "ProjectSourceManifests" ADD "SessionContextData" bytea NULL;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220318201033_ProjectSourceManifestSessionState') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220318201033_ProjectSourceManifestSessionState', '6.0.3');
          END IF;
      END $EF$;
      COMMIT;


      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231121202436_AddSyncServiceIndex') THEN
      CREATE INDEX "IX_SyncSessions_StartedTs_Status" ON "SyncSessions" ("StartedTs", "Status");
      END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20231121202436_AddSyncServiceIndex') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20231121202436_AddSyncServiceIndex', '6.0.3');
      END IF;
      END $EF$;
      COMMIT;


    04-AnnotationsUser.sh: "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username
      \"$POSTGRES_USER\" <<-EOSQL\n\tCREATE USER annotations WITH ENCRYPTED PASSWORD
      '$ANNOTATIONS_DB_PASSWORD';\nEOSQL\n"
    05-Annotations.sql: "--\n-- PostgreSQL database dump\n--\n\n-- Dumped from database
      version 11.20\n-- Dumped by pg_dump version 15.4\n\nSET statement_timeout =
      0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET
      client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path',
      '', false);\nSET check_function_bodies = false;\nSET xmloption = content;\nSET
      client_min_messages = warning;\nSET row_security = off;\n\nCREATE DATABASE \"Annotations\"
      WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE
      = 'en_US.utf8';\n\nGRANT ALL PRIVILEGES ON DATABASE \"Annotations\" TO annotations;\n\nALTER
      DATABASE \"Annotations\" OWNER TO annotations;\n\n\\connect \"Annotations\"
      annotations\n\nSET SCHEMA 'public';\n\n-- The following script was generated
      by running `dotnet ef migrations script --idempotent`\n-- with a few syntax
      corrections:\n--    - TRUNCATE TABLE public.\"NotificationLog\"\n--    - ALTER
      TYPE notification_event_type ADD VALUE IF NOT EXISTS 'blob_added_or_edited';
      \ \n--    - ALTER TYPE notification_event_type ADD VALUE IF NOT EXISTS 'blob_removed';\nCREATE
      TABLE IF NOT EXISTS \"__EFMigrationsHistory\" (\n  \"MigrationId\" character
      varying(150) NOT NULL,\n  \"ProductVersion\" character varying(32) NOT NULL,\n
      \ CONSTRAINT \"PK___EFMigrationsHistory\" PRIMARY KEY (\"MigrationId\")\n  );\n\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210122160517_AddTopicsAndComments') THEN\nCREATE TABLE \"Topic\" (\n                       \"Id\"
      bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n                       \"ServerId\"
      character varying(64) NOT NULL,\n                       \"ProjectId\" character
      varying(64) NOT NULL,\n                       \"SourceId\" character varying(512)
      NOT NULL,\n                       \"SyncObjectId\" character varying(512) NOT
      NULL,\n                       \"PositionX\" real NOT NULL,\n                       \"PositionY\"
      real NOT NULL,\n                       \"PositionZ\" real NOT NULL,\n                       \"Title\"
      text NOT NULL,\n                       \"CreationAuthor\" character varying(64)
      NOT NULL,\n                       \"CreationDate\" timestamp without time zone
      NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),\n                       \"ModifiedAuthor\"
      character varying(64) NOT NULL,\n                       \"ModifiedDate\" timestamp
      without time zone NOT NULL,\n                       \"Description\" text NOT
      NULL,\n                       \"Stage\" integer NOT NULL,\n                       CONSTRAINT
      \"PK_Topic\" PRIMARY KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210122160517_AddTopicsAndComments')
      THEN\nCREATE TABLE \"TopicComment\" (\n                              \"Id\"
      bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n                              \"TopicId\"
      bigint NOT NULL,\n                              \"Date\" timestamp without time
      zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),\n                              \"Author\"
      character varying(64) NOT NULL,\n                              \"Comment\" text
      NOT NULL,\n                              \"ModifiedDate\" timestamp without
      time zone NOT NULL,\n                              CONSTRAINT \"PK_TopicComment\"
      PRIMARY KEY (\"Id\"),\n                              CONSTRAINT \"FK_TopicComment_Topic_TopicId\"
      FOREIGN KEY (\"TopicId\") REFERENCES \"Topic\" (\"Id\") ON DELETE CASCADE\n);\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210122160517_AddTopicsAndComments') THEN\nCREATE
      INDEX \"IX_Topic_ServerId_ProjectId\" ON \"Topic\" (\"ServerId\", \"ProjectId\");\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210122160517_AddTopicsAndComments') THEN\nCREATE
      INDEX \"IX_TopicComment_TopicId\" ON \"TopicComment\" (\"TopicId\");\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210122160517_AddTopicsAndComments') THEN\n    INSERT
      INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n    VALUES
      ('20210122160517_AddTopicsAndComments', '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210406185100_AddUserTable') THEN\nALTER TABLE \"TopicComment\" DROP COLUMN
      \"Author\";\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210406185100_AddUserTable')
      THEN\nALTER TABLE \"Topic\" DROP COLUMN \"CreationAuthor\";\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210406185100_AddUserTable') THEN\nALTER TABLE \"Topic\" DROP COLUMN \"ModifiedAuthor\";\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210406185100_AddUserTable') THEN\nALTER TABLE \"TopicComment\"
      ADD \"AuthorUserId\" bigint NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210406185100_AddUserTable') THEN\nALTER TABLE \"Topic\" ADD \"CreationUserId\"
      bigint NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210406185100_AddUserTable')
      THEN\nALTER TABLE \"Topic\" ADD \"ModifiedUserId\" bigint NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210406185100_AddUserTable') THEN\nCREATE TABLE \"User\"
      (\n                      \"Id\" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n
      \                     \"ReflectUserId\" character varying(64) NOT NULL,\n                      \"FullName\"
      character varying(128) NOT NULL,\n                      CONSTRAINT \"PK_User\"
      PRIMARY KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210406185100_AddUserTable')
      THEN\nCREATE INDEX \"IX_TopicComment_AuthorUserId\" ON \"TopicComment\" (\"AuthorUserId\");\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210406185100_AddUserTable') THEN\nCREATE INDEX \"IX_Topic_CreationUserId\"
      ON \"Topic\" (\"CreationUserId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210406185100_AddUserTable')
      THEN\nCREATE INDEX \"IX_Topic_ModifiedUserId\" ON \"Topic\" (\"ModifiedUserId\");\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210406185100_AddUserTable') THEN\nCREATE UNIQUE INDEX
      \"IX_User_ReflectUserId\" ON \"User\" (\"ReflectUserId\");\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210406185100_AddUserTable') THEN\nALTER TABLE \"Topic\" ADD CONSTRAINT
      \"FK_Topic_User_CreationUserId\" FOREIGN KEY (\"CreationUserId\") REFERENCES
      \"User\" (\"Id\") ON DELETE CASCADE;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210406185100_AddUserTable')
      THEN\nALTER TABLE \"Topic\" ADD CONSTRAINT \"FK_Topic_User_ModifiedUserId\"
      FOREIGN KEY (\"ModifiedUserId\") REFERENCES \"User\" (\"Id\") ON DELETE RESTRICT;\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210406185100_AddUserTable') THEN\nALTER TABLE \"TopicComment\"
      ADD CONSTRAINT \"FK_TopicComment_User_AuthorUserId\" FOREIGN KEY (\"AuthorUserId\")
      REFERENCES \"User\" (\"Id\") ON DELETE CASCADE;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210406185100_AddUserTable') THEN\n    INSERT INTO \"__EFMigrationsHistory\"
      (\"MigrationId\", \"ProductVersion\")\n    VALUES ('20210406185100_AddUserTable',
      '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" DROP COLUMN \"PositionX\";\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" DROP COLUMN
      \"PositionY\";\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1
      FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" DROP COLUMN \"PositionZ\";\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"TopicComment\"
      ALTER COLUMN \"Comment\" TYPE character varying(512);\nALTER TABLE \"TopicComment\"
      ALTER COLUMN \"Comment\" SET NOT NULL;\nALTER TABLE \"TopicComment\" ALTER COLUMN
      \"Comment\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ALTER COLUMN \"Title\" TYPE character varying(512);\nALTER
      TABLE \"Topic\" ALTER COLUMN \"Title\" SET NOT NULL;\nALTER TABLE \"Topic\"
      ALTER COLUMN \"Title\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ALTER COLUMN \"Description\" TYPE character varying(512);\nALTER
      TABLE \"Topic\" ALTER COLUMN \"Description\" SET NOT NULL;\nALTER TABLE \"Topic\"
      ALTER COLUMN \"Description\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" ADD \"CameraPositionX\"
      real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ADD \"CameraPositionY\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE
      \"Topic\" ADD \"CameraPositionZ\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" ADD \"CameraRotationW\"
      real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ADD \"CameraRotationX\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE
      \"Topic\" ADD \"CameraRotationY\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" ADD \"CameraRotationZ\"
      real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ADD \"LocalPositionX\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE
      \"Topic\" ADD \"LocalPositionY\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" ADD \"LocalPositionZ\"
      real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\nALTER TABLE \"Topic\" ADD \"WorldPositionX\" real NOT NULL DEFAULT 0;\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE
      \"Topic\" ADD \"WorldPositionY\" real NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210407145637_AddPositionAndCamera') THEN\nALTER TABLE \"Topic\" ADD \"WorldPositionZ\"
      real NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210407145637_AddPositionAndCamera')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20210407145637_AddPositionAndCamera', '3.1.18');\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210413182720_AddRotations') THEN\nALTER TABLE \"Topic\"
      ADD \"LocalRotationW\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210413182720_AddRotations')
      THEN\nALTER TABLE \"Topic\" ADD \"LocalRotationX\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210413182720_AddRotations') THEN\nALTER TABLE \"Topic\"
      ADD \"LocalRotationY\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210413182720_AddRotations')
      THEN\nALTER TABLE \"Topic\" ADD \"LocalRotationZ\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210413182720_AddRotations') THEN\nALTER TABLE \"Topic\"
      ADD \"WorldRotationW\" real NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210413182720_AddRotations') THEN\nALTER TABLE \"Topic\" ADD \"WorldRotationX\"
      real NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210413182720_AddRotations')
      THEN\nALTER TABLE \"Topic\" ADD \"WorldRotationY\" real NOT NULL DEFAULT 0;\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210413182720_AddRotations') THEN\nALTER TABLE \"Topic\"
      ADD \"WorldRotationZ\" real NOT NULL DEFAULT 0;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210413182720_AddRotations') THEN\n    INSERT INTO \"__EFMigrationsHistory\"
      (\"MigrationId\", \"ProductVersion\")\n    VALUES ('20210413182720_AddRotations',
      '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210429125502_AddNotificationLog')
      THEN\nCREATE TYPE notification_event_type AS ENUM ('keep_alive', 'topic_added',
      'topic_edited', 'topic_removed', 'comment_added', 'comment_edited', 'comment_removed');\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210429125502_AddNotificationLog') THEN\nCREATE TABLE
      \"NotificationLog\" (\n                                 \"Id\" bigint NOT NULL
      GENERATED BY DEFAULT AS IDENTITY,\n                                 \"ServerId\"
      character varying(64) NOT NULL,\n                                 \"ProjectId\"
      character varying(64) NOT NULL,\n                                 \"CreationDate\"
      timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE
      'UTC'),\n                                 \"EventType\" notification_event_type
      NOT NULL,\n                                 \"RawEventData\" text NOT NULL,\n
      \                                CONSTRAINT \"PK_NotificationLog\" PRIMARY KEY
      (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210429125502_AddNotificationLog')
      THEN\nCREATE INDEX \"IX_NotificationLog_ServerId_ProjectId\" ON \"NotificationLog\"
      (\"ServerId\", \"ProjectId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210429125502_AddNotificationLog')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20210429125502_AddNotificationLog', '3.1.18');\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210923191953_AddCameraLocalTransform') THEN\nALTER TABLE \"Topic\" ADD
      \"CameraLocalPositionX\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210923191953_AddCameraLocalTransform')
      THEN\nALTER TABLE \"Topic\" ADD \"CameraLocalPositionY\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210923191953_AddCameraLocalTransform') THEN\nALTER
      TABLE \"Topic\" ADD \"CameraLocalPositionZ\" real NULL;\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210923191953_AddCameraLocalTransform') THEN\nALTER TABLE \"Topic\" ADD
      \"CameraLocalRotationW\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210923191953_AddCameraLocalTransform')
      THEN\nALTER TABLE \"Topic\" ADD \"CameraLocalRotationX\" real NULL;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20210923191953_AddCameraLocalTransform') THEN\nALTER
      TABLE \"Topic\" ADD \"CameraLocalRotationY\" real NULL;\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20210923191953_AddCameraLocalTransform') THEN\nALTER TABLE \"Topic\" ADD
      \"CameraLocalRotationZ\" real NULL;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20210923191953_AddCameraLocalTransform')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20210923191953_AddCameraLocalTransform', '3.1.18');\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211117153645_AddReadStatus') THEN\nCREATE TABLE \"TopicCommentRead\"
      (\n                                  \"TopicCommentId\" bigint NOT NULL,\n                                  \"UserId\"
      bigint NOT NULL,\n                                  \"DateRead\" timestamp without
      time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),\n                                  CONSTRAINT
      \"PK_TopicCommentRead\" PRIMARY KEY (\"UserId\", \"TopicCommentId\"),\n                                  CONSTRAINT
      \"FK_TopicCommentRead_TopicComment_TopicCommentId\" FOREIGN KEY (\"TopicCommentId\")
      REFERENCES \"TopicComment\" (\"Id\") ON DELETE CASCADE,\n                                  CONSTRAINT
      \"FK_TopicCommentRead_User_UserId\" FOREIGN KEY (\"UserId\") REFERENCES \"User\"
      (\"Id\") ON DELETE CASCADE\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211117153645_AddReadStatus')
      THEN\nCREATE TABLE \"TopicRead\" (\n                           \"TopicId\" bigint
      NOT NULL,\n                           \"UserId\" bigint NOT NULL,\n                           \"DateRead\"
      timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE
      'UTC'),\n                           CONSTRAINT \"PK_TopicRead\" PRIMARY KEY
      (\"UserId\", \"TopicId\"),\n                           CONSTRAINT \"FK_TopicRead_Topic_TopicId\"
      FOREIGN KEY (\"TopicId\") REFERENCES \"Topic\" (\"Id\") ON DELETE CASCADE,\n
      \                          CONSTRAINT \"FK_TopicRead_User_UserId\" FOREIGN KEY
      (\"UserId\") REFERENCES \"User\" (\"Id\") ON DELETE CASCADE\n);\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211117153645_AddReadStatus') THEN\nCREATE INDEX \"IX_TopicCommentRead_TopicCommentId\"
      ON \"TopicCommentRead\" (\"TopicCommentId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211117153645_AddReadStatus') THEN\nCREATE INDEX \"IX_TopicRead_TopicId\"
      ON \"TopicRead\" (\"TopicId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211117153645_AddReadStatus')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20211117153645_AddReadStatus', '3.1.18');\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211123181647_AddUserIdToNotifLog') THEN\n    TRUNCATE TABLE public.\"NotificationLog\";\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211123181647_AddUserIdToNotifLog') THEN\nALTER TABLE
      \"NotificationLog\" ADD \"ReflectUserId\" character varying(64) NOT NULL DEFAULT
      '';\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211123181647_AddUserIdToNotifLog') THEN\nCREATE INDEX
      \"IX_NotificationLog_ReflectUserId\" ON \"NotificationLog\" (\"ReflectUserId\");\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211123181647_AddUserIdToNotifLog') THEN\n    INSERT
      INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n    VALUES
      ('20211123181647_AddUserIdToNotifLog', '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211207163349_AddModelColors') THEN\nCREATE TYPE coloration_feature AS ENUM
      ('metadata', 'status_tracking', 'timeline', 'third_party');\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211207163349_AddModelColors') THEN\nCREATE TABLE \"ModelColor\" (\n                            \"Id\"
      bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n                            \"ServerId\"
      character varying(64) NOT NULL,\n                            \"ProjectId\" character
      varying(64) NOT NULL,\n                            \"Feature\" coloration_feature
      NOT NULL,\n                            \"Field\" character varying(256) NOT
      NULL,\n                            \"Value\" text NOT NULL,\n                            \"R\"
      integer NOT NULL,\n                            \"G\" integer NOT NULL,\n                            \"B\"
      integer NOT NULL,\n                            \"A\" integer NOT NULL,\n                            \"ModifiedDate\"
      timestamp without time zone NOT NULL,\n                            CONSTRAINT
      \"PK_ModelColor\" PRIMARY KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211207163349_AddModelColors') THEN\nCREATE TABLE \"ModelColorPreset\" (\n
      \                                 \"Id\" bigint NOT NULL GENERATED BY DEFAULT
      AS IDENTITY,\n                                  \"ServerId\" character varying(64)
      NOT NULL,\n                                  \"ProjectId\" character varying(64)
      NOT NULL,\n                                  \"Feature\" coloration_feature
      NOT NULL,\n                                  \"R\" integer NOT NULL,\n                                  \"G\"
      integer NOT NULL,\n                                  \"B\" integer NOT NULL,\n
      \                                 \"A\" integer NOT NULL,\n                                  \"Index\"
      integer NOT NULL,\n                                  CONSTRAINT \"PK_ModelColorPreset\"
      PRIMARY KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211207163349_AddModelColors')
      THEN\nCREATE UNIQUE INDEX \"IX_ModelColor_ServerId_ProjectId_Feature_Field_Value\"
      ON \"ModelColor\" (\"ServerId\", \"ProjectId\", \"Feature\", \"Field\", \"Value\");\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20211207163349_AddModelColors') THEN\nCREATE UNIQUE
      INDEX \"IX_ModelColorPreset_ServerId_ProjectId_Feature_Index\" ON \"ModelColorPreset\"
      (\"ServerId\", \"ProjectId\", \"Feature\", \"Index\");\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20211207163349_AddModelColors') THEN\n    INSERT INTO \"__EFMigrationsHistory\"
      (\"MigrationId\", \"ProductVersion\")\n    VALUES ('20211207163349_AddModelColors',
      '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColorPreset\" ALTER COLUMN \"R\" TYPE real;\nALTER
      TABLE \"ModelColorPreset\" ALTER COLUMN \"R\" SET NOT NULL;\nALTER TABLE \"ModelColorPreset\"
      ALTER COLUMN \"R\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColorPreset\" ALTER COLUMN \"G\" TYPE real;\nALTER
      TABLE \"ModelColorPreset\" ALTER COLUMN \"G\" SET NOT NULL;\nALTER TABLE \"ModelColorPreset\"
      ALTER COLUMN \"G\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColorPreset\" ALTER COLUMN \"B\" TYPE real;\nALTER
      TABLE \"ModelColorPreset\" ALTER COLUMN \"B\" SET NOT NULL;\nALTER TABLE \"ModelColorPreset\"
      ALTER COLUMN \"B\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColorPreset\" ALTER COLUMN \"A\" TYPE real;\nALTER
      TABLE \"ModelColorPreset\" ALTER COLUMN \"A\" SET NOT NULL;\nALTER TABLE \"ModelColorPreset\"
      ALTER COLUMN \"A\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColor\" ALTER COLUMN \"R\" TYPE real;\nALTER TABLE
      \"ModelColor\" ALTER COLUMN \"R\" SET NOT NULL;\nALTER TABLE \"ModelColor\"
      ALTER COLUMN \"R\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColor\" ALTER COLUMN \"G\" TYPE real;\nALTER TABLE
      \"ModelColor\" ALTER COLUMN \"G\" SET NOT NULL;\nALTER TABLE \"ModelColor\"
      ALTER COLUMN \"G\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColor\" ALTER COLUMN \"B\" TYPE real;\nALTER TABLE
      \"ModelColor\" ALTER COLUMN \"B\" SET NOT NULL;\nALTER TABLE \"ModelColor\"
      ALTER COLUMN \"B\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\nALTER TABLE \"ModelColor\" ALTER COLUMN \"A\" TYPE real;\nALTER TABLE
      \"ModelColor\" ALTER COLUMN \"A\" SET NOT NULL;\nALTER TABLE \"ModelColor\"
      ALTER COLUMN \"A\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20211208155522_ColorsAreFloats')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20211208155522_ColorsAreFloats', '3.1.18');\nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20220207141515_UserIdLength') THEN\nALTER TABLE \"User\" ALTER COLUMN \"ReflectUserId\"
      TYPE character varying(256);\nALTER TABLE \"User\" ALTER COLUMN \"ReflectUserId\"
      SET NOT NULL;\nALTER TABLE \"User\" ALTER COLUMN \"ReflectUserId\" DROP DEFAULT;\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220207141515_UserIdLength') THEN\nALTER TABLE \"NotificationLog\"
      ALTER COLUMN \"ReflectUserId\" TYPE character varying(256);\nALTER TABLE \"NotificationLog\"
      ALTER COLUMN \"ReflectUserId\" SET NOT NULL;\nALTER TABLE \"NotificationLog\"
      ALTER COLUMN \"ReflectUserId\" DROP DEFAULT;\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20220207141515_UserIdLength') THEN\n    INSERT INTO \"__EFMigrationsHistory\"
      (\"MigrationId\", \"ProductVersion\")\n    VALUES ('20220207141515_UserIdLength',
      '3.1.18');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys')
      THEN\nCREATE TYPE issue_management_connector_type AS ENUM ('reflect', 'procore',
      'autodesk');\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys')
      THEN\nALTER TABLE \"TopicComment\" ADD \"IssueManagementKey\" text NOT NULL
      DEFAULT '';\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM
      \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys')
      THEN\nALTER TABLE \"Topic\" ADD \"IssueManagementKey\" text NOT NULL DEFAULT
      '';\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys') THEN\nALTER
      TABLE \"Topic\" ADD \"IssueType\" integer NOT NULL DEFAULT 0;\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys') THEN\nCREATE
      TABLE \"IssueManagementConnector\" (\n                                          \"Id\"
      bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n                                          \"IssueManagementKey\"
      issue_management_connector_type NOT NULL,\n                                          \"AccessToken\"
      text NOT NULL,\n                                          \"RefreshToken\" text
      NOT NULL,\n                                          \"ExpiresAt\" timestamp
      without time zone NOT NULL,\n                                          \"AuthId\"
      text NULL,\n                                          \"AuthEmail\" text NULL,\n
      \                                         \"AuthName\" text NULL,\n                                          \"UserId\"
      bigint NOT NULL,\n                                          CONSTRAINT \"PK_IssueManagementConnector\"
      PRIMARY KEY (\"Id\"),\n                                          CONSTRAINT
      \"FK_IssueManagementConnector_User_UserId\" FOREIGN KEY (\"UserId\") REFERENCES
      \"User\" (\"Id\") ON DELETE CASCADE\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20220208174617_AddIssueManagementKeys') THEN\nCREATE TABLE \"ProjectConnection\"
      (\n                                   \"Id\" bigint NOT NULL GENERATED BY DEFAULT
      AS IDENTITY,\n                                   \"ServerId\" character varying(64)
      NOT NULL,\n                                   \"ProjectId\" character varying(64)
      NOT NULL,\n                                   \"IssueManagementKey\" issue_management_connector_type
      NOT NULL,\n                                   \"BackendData\" text NOT NULL,\n
      \                                  CONSTRAINT \"PK_ProjectConnection\" PRIMARY
      KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT
      1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys')
      THEN\nCREATE UNIQUE INDEX \"IX_IssueManagementConnector_UserId_IssueManagementKey\"
      ON \"IssueManagementConnector\" (\"UserId\", \"IssueManagementKey\");\nEND IF;\nEND
      $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys') THEN\nCREATE
      UNIQUE INDEX \"IX_ProjectConnection_ServerId_ProjectId\" ON \"ProjectConnection\"
      (\"ServerId\", \"ProjectId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT
      EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220208174617_AddIssueManagementKeys')
      THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\n
      \   VALUES ('20220208174617_AddIssueManagementKeys', '3.1.18');\nEND IF;\nEND
      $$;\n \nDO $$\nBEGIN\n  IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220316201222_Blobs') THEN\n-- ALTER TYPE notification_event_type
      ADD VALUE IF NOT EXISTS 'blob_added_or_edited';\n\n-- This is fixed in Postgres
      12\n-- https://github.com/prisma/prisma/issues/5290#issuecomment-775140829  \n--
      using the workaround for now\n-- https://stackoverflow.com/questions/53149484/error-alter-type-add-cannot-run-inside-a-transaction-block\n
      \ \nALTER TABLE \"NotificationLog\"\nALTER COLUMN \"EventType\" TYPE VARCHAR(255);\n\nDROP
      TYPE IF EXISTS notification_event_type;\nCREATE TYPE notification_event_type
      AS ENUM (\n    'keep_alive', 'topic_added', 'topic_edited', 'topic_removed',
      'comment_added', 'comment_edited', 'comment_removed',\n    'blob_added_or_edited'\n);\n\nALTER
      TABLE \"NotificationLog\"\nALTER COLUMN \"EventType\" TYPE notification_event_type\n
      \   USING (\"EventType\"::notification_event_type);\n  \nEND IF;\nEND $$;\n\nDO
      $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20220316201222_Blobs') THEN\n-- ALTER TYPE notification_event_type ADD VALUE
      IF NOT EXISTS 'blob_removed';\n      -- This is fixed in Postgres 12\n-- https://github.com/prisma/prisma/issues/5290#issuecomment-775140829
      \ \n-- using the workaround for now\n-- https://stackoverflow.com/questions/53149484/error-alter-type-add-cannot-run-inside-a-transaction-block\n\nALTER
      TABLE \"NotificationLog\"\nALTER COLUMN \"EventType\" TYPE VARCHAR(255);\n\nDROP
      TYPE IF EXISTS notification_event_type;\nCREATE TYPE notification_event_type
      AS ENUM (\n    'keep_alive', 'topic_added', 'topic_edited', 'topic_removed',
      'comment_added', 'comment_edited', 'comment_removed',\n    'blob_added_or_edited',\n
      \   'blob_removed'\n);\n\nALTER TABLE \"NotificationLog\"\nALTER COLUMN \"EventType\"
      TYPE notification_event_type\n    USING (\"EventType\"::notification_event_type);\nEND
      IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\"
      WHERE \"MigrationId\" = '20220316201222_Blobs') THEN\nCREATE TABLE \"Blob\"
      (\n                      \"Id\" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\n
      \                     \"ServerId\" character varying(64) NOT NULL,\n                      \"ProjectId\"
      character varying(64) NOT NULL,\n                      \"BlobId\" character
      varying(128) NOT NULL,\n                      \"Data\" bytea NOT NULL,\n                      CONSTRAINT
      \"PK_Blob\" PRIMARY KEY (\"Id\")\n);\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n    IF
      NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\" = '20220316201222_Blobs')
      THEN\nCREATE UNIQUE INDEX \"IX_Blob_ServerId_ProjectId_BlobId\" ON \"Blob\"
      (\"ServerId\", \"ProjectId\", \"BlobId\");\nEND IF;\nEND $$;\n\nDO $$\nBEGIN\n
      \   IF NOT EXISTS(SELECT 1 FROM \"__EFMigrationsHistory\" WHERE \"MigrationId\"
      = '20220316201222_Blobs') THEN\n    INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\",
      \"ProductVersion\")\n    VALUES ('20220316201222_Blobs', '3.1.18');\nEND IF;\nEND
      $$;\n\n  \n"
    06-MatchmakerUser.sh: "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username
      \"$POSTGRES_USER\" <<-EOSQL\n\tCREATE USER matchmaker_service WITH ENCRYPTED
      PASSWORD '$MATCHMAKER_DB_PASSWORD';\nEOSQL\n"
    07-Matchmaker.sql: |-
      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;

      --
      -- Name: Matchmaker; Type: DATABASE; Schema: -; Owner: matchmaker_service
      --

      CREATE DATABASE "Matchmaker" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';
      ALTER DATABASE "Matchmaker" OWNER TO matchmaker_service;

      \connect "Matchmaker" matchmaker_service

      SET SCHEMA 'public';

      -- The following script was generated by running `dotnet ef migrations script --idempotent`


      CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
          "MigrationId" character varying(150) NOT NULL,
          "ProductVersion" character varying(32) NOT NULL,
          CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
      );

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TYPE allocation_status AS ENUM ('requested', 'pending', 'allocated');
          CREATE TYPE attendee_status AS ENUM ('connecting', 'connected', 'collect');
          CREATE TYPE deployment_status AS ENUM ('initializing', 'available', 'allocated', 'pending_collection', 'needs_collection');
          CREATE TYPE pool_slot_status AS ENUM ('empty', 'reserved', 'ready');
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "Avatars" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "RoomId" bigint NOT NULL,
              "UserId" bigint NOT NULL,
              "DeviceId" bigint NOT NULL,
              "Index" integer NOT NULL,
              CONSTRAINT "PK_Avatars" PRIMARY KEY ("Id")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "GameServers" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "Uid" text NOT NULL,
              "IP" text NOT NULL,
              "Port" integer NOT NULL,
              "ProcessUID" text NOT NULL,
              "Registered" timestamp without time zone NOT NULL,
              "Status" deployment_status NOT NULL,
              "Created" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "LastKeepAlive" timestamp without time zone NOT NULL,
              "LastInteraction" timestamp without time zone NOT NULL,
              "MarkedPending" timestamp without time zone NOT NULL,
              CONSTRAINT "PK_GameServers" PRIMARY KEY ("Id")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "Rooms" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "UID" text NOT NULL,
              "Created" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              CONSTRAINT "PK_Rooms" PRIMARY KEY ("Id")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "UsageQueryResults" (
              "RoomId" bigint NOT NULL,
              "UserCount" bigint NULL,
              "AllocId" bigint NULL,
              "ServerId" bigint NULL
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "Users" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "ExternalId" text NOT NULL,
              "FullName" text NOT NULL,
              "Created" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              CONSTRAINT "PK_Users" PRIMARY KEY ("Id")
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "PoolSlots" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "Status" pool_slot_status NOT NULL,
              "ServerId" bigint NULL,
              "LastUpdate" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "ServerUid" text NULL,
              CONSTRAINT "PK_PoolSlots" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_PoolSlots_GameServers_ServerId" FOREIGN KEY ("ServerId") REFERENCES "GameServers" ("Id") ON DELETE SET NULL
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "Allocations" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "RoomId" bigint NOT NULL,
              "ServerId" bigint NULL,
              "TryCount" integer NOT NULL,
              "RestartCount" integer NOT NULL,
              "Status" allocation_status NOT NULL,
              "LastTry" timestamp without time zone NOT NULL,
              "Created" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              CONSTRAINT "PK_Allocations" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_Allocations_Rooms_RoomId" FOREIGN KEY ("RoomId") REFERENCES "Rooms" ("Id") ON DELETE CASCADE,
              CONSTRAINT "FK_Allocations_GameServers_ServerId" FOREIGN KEY ("ServerId") REFERENCES "GameServers" ("Id") ON DELETE RESTRICT
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE TABLE "Attendees" (
              "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
              "RoomId" bigint NOT NULL,
              "UserId" bigint NOT NULL,
              "DeviceId" bigint NOT NULL,
              "Status" attendee_status NOT NULL,
              "Created" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
              "LastKeepAlive" timestamp without time zone NOT NULL,
              "Uid" uuid NOT NULL,
              "ProcessUid" text NOT NULL,
              CONSTRAINT "PK_Attendees" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_Attendees_Rooms_RoomId" FOREIGN KEY ("RoomId") REFERENCES "Rooms" ("Id") ON DELETE CASCADE,
              CONSTRAINT "FK_Attendees_Users_UserId" FOREIGN KEY ("UserId") REFERENCES "Users" ("Id") ON DELETE CASCADE
          );
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Allocations_RoomId" ON "Allocations" ("RoomId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Allocations_ServerId" ON "Allocations" ("ServerId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Attendees_Uid" ON "Attendees" ("Uid");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE INDEX "IX_Attendees_UserId" ON "Attendees" ("UserId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Attendees_RoomId_UserId_DeviceId" ON "Attendees" ("RoomId", "UserId", "DeviceId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Avatars_RoomId_UserId_DeviceId" ON "Avatars" ("RoomId", "UserId", "DeviceId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_GameServers_Uid" ON "GameServers" ("Uid");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_PoolSlots_ServerId" ON "PoolSlots" ("ServerId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Rooms_UID" ON "Rooms" ("UID");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          CREATE UNIQUE INDEX "IX_Users_ExternalId" ON "Users" ("ExternalId");
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210314233103_InitialCreate') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210314233103_InitialCreate', '6.0.2');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210323004358_AnonymousUserExpiry') THEN
          ALTER TABLE "Users" ADD "ExpiresOn" timestamp without time zone NULL;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20210323004358_AnonymousUserExpiry') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20210323004358_AnonymousUserExpiry', '6.0.2');
          END IF;
      END $EF$;
      COMMIT;

      START TRANSACTION;


      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220207180352_PresentationStatus') THEN
          CREATE TYPE presentation_role AS ENUM ('none', 'attendee', 'presenter');
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220207180352_PresentationStatus') THEN
          ALTER TABLE "Attendees" ADD "AttendeeRole" presentation_role NOT NULL DEFAULT 'none'::presentation_role;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220207180352_PresentationStatus') THEN
          ALTER TABLE "Attendees" ADD "LastPresentationEvent" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC');
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220207180352_PresentationStatus') THEN
          CREATE UNIQUE INDEX "IX_Attendees_RoomId_AttendeeRole" ON "Attendees" ("RoomId", "AttendeeRole") WHERE "AttendeeRole" = 'presenter'::presentation_role;
          END IF;
      END $EF$;

      DO $EF$
      BEGIN
          IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20220207180352_PresentationStatus') THEN
          INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
          VALUES ('20220207180352_PresentationStatus', '6.0.2');
          END IF;
      END $EF$;
      COMMIT;
    08-MurmurUser.sh: "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\"
      <<-EOSQL\n\tCREATE USER murmur_service WITH ENCRYPTED PASSWORD '$MURMUR_DB_PASSWORD';\nEOSQL\n"
    09-Murmur.sql: |+
      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;



      CREATE DATABASE "Murmur" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';
      GRANT ALL PRIVILEGES ON DATABASE "Murmur" TO murmur;

      ALTER DATABASE "Murmur" OWNER TO murmur_service;

      \connect "Murmur" murmur_service

      SET SCHEMA 'public';




  kind: ConfigMap
  metadata:
    creationTimestamp: "2023-10-16T20:20:22Z"
    name: db-init
    namespace: opr-develop
    resourceVersion: "198854580"
    uid: 7fe1fc88-a970-4799-8fb2-d134a2a7789d
- apiVersion: v1
  data:
    pre-stop-hook-script.sh: "#!/usr/bin/env bash\n\nset -uo pipefail\n\n# This script
      will wait for up to $PRE_STOP_ADDITIONAL_WAIT_SECONDS before allowing termination
      of the Pod \n# This slows down the process shutdown and allows to make changes
      to the pool gracefully, without blackholing traffic when DNS\n# still contains
      the IP that is already inactive. \n# As this runs in parallel to grace period
      after which process is SIGKILLed,\n# it should be set to allow enough time for
      the process to gracefully terminate.\n# It allows kube-proxy to refresh its
      rules and remove the terminating Pod IP.\n# Kube-proxy refresh period defaults
      to every 30 seconds, but the operation itself can take much longer if\n# using
      iptables with a lot of services, in which case the default 30sec might not be
      enough.\n# Also gives some additional bonus time to in-flight requests to terminate,
      and new requests to still\n# target the Pod IP before Elasticsearch stops.\nPRE_STOP_ADDITIONAL_WAIT_SECONDS=${PRE_STOP_ADDITIONAL_WAIT_SECONDS:=50}\n\n#
      PRE_STOP_SHUTDOWN_TYPE controls the type of shutdown that will be communicated
      to Elasticsearch. This should not be\n# changed to anything but restart. Specifically
      setting remove can lead to extensive data migration that might exceed the\n#
      terminationGracePeriodSeconds and lead to an incomplete shutdown.\nshutdown_type=${PRE_STOP_SHUTDOWN_TYPE:=restart}\n\n#
      capture response bodies in a temp file for better error messages and to extract
      necessary information for subsequent requests\nresp_body=$(mktemp)\n# shellcheck
      disable=SC2064\ntrap \"rm -f $resp_body\" EXIT\n\nscript_start=$(date +%s)\n\n#
      compute time in seconds since the given start time\nfunction duration() {\n
      \ local start=$1\n  end=$(date +%s)\n  echo $((end-start))\n}\n\n# use DNS errors
      as a proxy to abort this script early if there is no chance of successful completion\n#
      DNS errors are for example expected when the whole cluster including its service
      is being deleted\n# and the service URL can no longer be resolved even though
      we still have running Pods.\nmax_dns_errors=${PRE_STOP_MAX_DNS_ERRORS:=2}\nglobal_dns_error_cnt=0\n\nfunction
      request() {\n  local status exit\n  status=$(curl -k -sS -o \"$resp_body\" -w
      \"%{http_code}\" \"$@\")\n  exit=$?\n  if [ \"$exit\" -ne 0 ] || [ \"$status\"
      -lt 200 ] || [ \"$status\" -gt 299 ]; then\n    # track curl DNS errors separately\n
      \   if [ \"$exit\" -eq 6 ]; then ((global_dns_error_cnt++)); fi\n    # make
      sure we have a non-zero exit code in the presence of errors\n    if [ \"$exit\"
      -eq 0 ]; then exit=1; fi\n    log  \"$status\" \"$3\" #by convention the third
      arg contains the URL\n    return $exit\n  fi\n  global_dns_error_cnt=0\n  return
      0\n}\n\nfunction retry() {\n  local retries=$1\n  shift\n\n  local count=0\n
      \ until \"$@\"; do\n    exit=$?\n    wait=$((2 ** count))\n    count=$((count
      + 1))\n    if [ $global_dns_error_cnt -gt \"$max_dns_errors\" ]; then\n      error_exit
      \"too many DNS errors, giving up\"\n    fi\n    if [ $count -lt \"$retries\"
      ]; then\n      log \"retry $count/$retries exited $exit, retrying in $wait seconds\"\n
      \     sleep $wait\n    else\n      log \"retry $count/$retries exited $exit,
      no more retries left\"\n      return $exit\n    fi\n  done\n  return 0\n}\n\nfunction
      log() {\n   local timestamp\n   timestamp=$(date --iso-8601=seconds)\n   echo
      \"{\\\"@timestamp\\\": \\\"${timestamp}\\\", \\\"message\\\": \\\"$*\\\", \\\"ecs.version\\\":
      \\\"1.2.0\\\", \\\"event.dataset\\\": \\\"elasticsearch.pre-stop-hook\\\"}\"
      | tee /proc/1/fd/2 2> /dev/null\n}\n\nfunction error_exit() {\n  log \"$@\"\n
      \ delayed_exit 1\n}\n\nfunction delayed_exit() {\n  local elapsed\n  elapsed=$(duration
      \"$script_start\")\n  local remaining=$((PRE_STOP_ADDITIONAL_WAIT_SECONDS -
      elapsed))\n  if (( remaining < 0 )); then\n    exit ${1-0}\n  fi\n  log \"delaying
      termination for $remaining seconds\"\n  sleep $remaining\n  exit ${1-0}\n}\n\nfunction
      supports_node_shutdown() {\n  local version=\"$1\"\n  version=${version#[vV]}\n
      \ major=\"${version%%\\.*}\"\n  minor=\"${version#*.}\"\n  minor=\"${minor%.*}\"\n
      \ patch=\"${version##*.}\"\n  # node shutdown is supported as of 7.15.2\n  if
      [ \"$major\" -lt 7 ]  || { [ \"$major\" -eq 7 ] && [ \"$minor\" -eq 15 ] &&
      [ \"$patch\" -lt 2 ]; }; then\n    return 1\n  fi\n  return 0\n}\n\nversion=\"\"\nif
      [[ -f \"/mnt/elastic-internal/downward-api/labels\" ]]; then\n  # get Elasticsearch
      version from the downward API\n  version=$(grep \"elasticsearch.k8s.elastic.co/version\"
      /mnt/elastic-internal/downward-api/labels | cut -d '=' -f 2)\n  # remove quotes\n
      \ version=$(echo \"${version}\" | tr -d '\"')\nfi\n\n# if ES version does not
      support node shutdown exit early\nif ! supports_node_shutdown \"$version\";
      then\n  delayed_exit \nfi\n\n# setup basic auth if credentials are available\nif
      [ -f \"/mnt/elastic-internal/pod-mounted-users/elastic-internal-pre-stop\" ];
      then\n  PROBE_PASSWORD=$(</mnt/elastic-internal/pod-mounted-users/elastic-internal-pre-stop)\n
      \ BASIC_AUTH=\"-u elastic-internal-pre-stop:${PROBE_PASSWORD}\"\nelse\n  # typically
      the case on upgrades from versions that did not have this script yet and the
      necessary volume mounts are missing\n  log \"no API credentials available, will
      not attempt node shutdown orchestration from pre-stop hook\"\n  delayed_exit\nfi\n\nES_URL=https://elasticsearch-es-internal-http.opr-develop.svc:9200\n\nlog
      \"retrieving node ID\"\nretry 10 request -X GET \"$ES_URL/_cat/nodes?full_id=true&h=id,name\"
      $BASIC_AUTH\nif [ \"$?\" -ne 0 ]; then\n\terror_exit \"failed to retrieve node
      ID\"\nfi\n\nNODE_ID=$(grep \"$POD_NAME\" \"$resp_body\" | cut -f 1 -d ' ')\n\n#
      check if there is an ongoing shutdown request\nrequest -X GET $ES_URL/_nodes/\"$NODE_ID\"/shutdown
      $BASIC_AUTH\nif grep -q -v '\"nodes\":\\[\\]' \"$resp_body\"; then\n\tlog \"shutdown
      managed by ECK operator\"\n\tdelayed_exit      \nfi\n\nlog \"initiating node
      shutdown\"\nretry 10 request -X PUT $ES_URL/_nodes/\"$NODE_ID\"/shutdown $BASIC_AUTH
      -H 'Content-Type: application/json' -d\"\n{\n  \\\"type\\\": \\\"$shutdown_type\\\",\n
      \ \\\"reason\\\": \\\"pre-stop hook\\\"\n}\n\"\nif [ \"$?\" -ne 0 ]; then\n
      \  error_exit \"failed to call node shutdown API\"\nfi\n\nwhile :\ndo \n   log
      \"waiting for node shutdown to complete\"\n   request -X GET $ES_URL/_nodes/\"$NODE_ID\"/shutdown
      $BASIC_AUTH\n   if [ \"$?\" -eq 0 ] && grep -q -v 'IN_PROGRESS\\|STALLED' \"$resp_body\";
      then\n      break\n   fi\n   sleep 10 \ndone\n\ndelayed_exit\n"
    prepare-fs.sh: "#!/usr/bin/env bash\n\n\tset -eu\n\n\t# the operator only works
      with the default ES distribution\n\tlicense=/usr/share/elasticsearch/LICENSE.txt\n\tif
      [[ ! -f $license || $(grep -Exc \"ELASTIC LICENSE AGREEMENT|Elastic License
      2.0\" $license) -ne 1 ]]; then\n\t\t>&2 echo \"unsupported_distribution\"\n\t\texit
      42\n\tfi\n\n\t# compute time in seconds since the given start time\n\tfunction
      duration() {\n\t\tlocal start=$1\n\t\tend=$(date +%s)\n\t\techo $((end-start))\n\t}\n\n\t######################\n\t#
      \       START       #\n\t######################\n\n\tscript_start=$(date +%s)\n\n\techo
      \"Starting init script\"\n\n\t######################\n\t#  Files persistence
      #\n\t######################\n\n\t# Persist the content of bin/, config/ and
      plugins/ to a volume,\n\t# so installed plugins files can to be used by the
      ES container\n\tmv_start=$(date +%s)\n\t\n\t\tif [[ -z \"$(ls -A /usr/share/elasticsearch/config)\"
      ]]; then\n\t\t\techo \"Empty dir /usr/share/elasticsearch/config\"\n\t\telse\n\t\t\techo
      \"Copying /usr/share/elasticsearch/config/* to /mnt/elastic-internal/elasticsearch-config-local/\"\n\t\t\t#
      Use \"yes\" and \"-f\" as we want the init container to be idempotent and not
      to fail when executed more than once.\n\t\t\tyes | cp -avf /usr/share/elasticsearch/config/*
      /mnt/elastic-internal/elasticsearch-config-local/ \n\t\tfi\n\t\n\t\tif [[ -z
      \"$(ls -A /usr/share/elasticsearch/plugins)\" ]]; then\n\t\t\techo \"Empty dir
      /usr/share/elasticsearch/plugins\"\n\t\telse\n\t\t\techo \"Copying /usr/share/elasticsearch/plugins/*
      to /mnt/elastic-internal/elasticsearch-plugins-local/\"\n\t\t\t# Use \"yes\"
      and \"-f\" as we want the init container to be idempotent and not to fail when
      executed more than once.\n\t\t\tyes | cp -avf /usr/share/elasticsearch/plugins/*
      /mnt/elastic-internal/elasticsearch-plugins-local/ \n\t\tfi\n\t\n\t\tif [[ -z
      \"$(ls -A /usr/share/elasticsearch/bin)\" ]]; then\n\t\t\techo \"Empty dir /usr/share/elasticsearch/bin\"\n\t\telse\n\t\t\techo
      \"Copying /usr/share/elasticsearch/bin/* to /mnt/elastic-internal/elasticsearch-bin-local/\"\n\t\t\t#
      Use \"yes\" and \"-f\" as we want the init container to be idempotent and not
      to fail when executed more than once.\n\t\t\tyes | cp -avf /usr/share/elasticsearch/bin/*
      /mnt/elastic-internal/elasticsearch-bin-local/ \n\t\tfi\n\t\n\techo \"Files
      copy duration: $(duration $mv_start) sec.\"\n\n\t######################\n\t#
      \ Config linking    #\n\t######################\n\n\t# Link individual files
      from their mount location into the config dir\n\t# to a volume, to be used by
      the ES container\n\tln_start=$(date +%s)\n\t\n\t\techo \"Linking /mnt/elastic-internal/xpack-file-realm/users
      to /mnt/elastic-internal/elasticsearch-config-local/users\"\n\t\tln -sf /mnt/elastic-internal/xpack-file-realm/users
      /mnt/elastic-internal/elasticsearch-config-local/users\n\t\n\t\techo \"Linking
      /mnt/elastic-internal/xpack-file-realm/roles.yml to /mnt/elastic-internal/elasticsearch-config-local/roles.yml\"\n\t\tln
      -sf /mnt/elastic-internal/xpack-file-realm/roles.yml /mnt/elastic-internal/elasticsearch-config-local/roles.yml\n\t\n\t\techo
      \"Linking /mnt/elastic-internal/xpack-file-realm/users_roles to /mnt/elastic-internal/elasticsearch-config-local/users_roles\"\n\t\tln
      -sf /mnt/elastic-internal/xpack-file-realm/users_roles /mnt/elastic-internal/elasticsearch-config-local/users_roles\n\t\n\t\techo
      \"Linking /mnt/elastic-internal/elasticsearch-config/elasticsearch.yml to /mnt/elastic-internal/elasticsearch-config-local/elasticsearch.yml\"\n\t\tln
      -sf /mnt/elastic-internal/elasticsearch-config/elasticsearch.yml /mnt/elastic-internal/elasticsearch-config-local/elasticsearch.yml\n\t\n\t\techo
      \"Linking /mnt/elastic-internal/unicast-hosts/unicast_hosts.txt to /mnt/elastic-internal/elasticsearch-config-local/unicast_hosts.txt\"\n\t\tln
      -sf /mnt/elastic-internal/unicast-hosts/unicast_hosts.txt /mnt/elastic-internal/elasticsearch-config-local/unicast_hosts.txt\n\t\n\t\techo
      \"Linking /mnt/elastic-internal/xpack-file-realm/service_tokens to /mnt/elastic-internal/elasticsearch-config-local/service_tokens\"\n\t\tln
      -sf /mnt/elastic-internal/xpack-file-realm/service_tokens /mnt/elastic-internal/elasticsearch-config-local/service_tokens\n\t\n\techo
      \"File linking duration: $(duration $ln_start) sec.\"\n\n\t######################\n\t#
      \ Volumes chown     #\n\t######################\n\n\t# chown the data and logs
      volume to the elasticsearch user\n\t# only done when running as root, other
      cases should be handled\n\t# with a proper security context\n\tchown_start=$(date
      +%s)\n\tif [[ $EUID -eq 0 ]]; then\n\t\t\n\t\t\techo \"chowning /usr/share/elasticsearch/data
      to elasticsearch:elasticsearch\"\n\t\t\tchown -v elasticsearch:elasticsearch
      /usr/share/elasticsearch/data\n\t\t\n\t\t\techo \"chowning /usr/share/elasticsearch/logs
      to elasticsearch:elasticsearch\"\n\t\t\tchown -v elasticsearch:elasticsearch
      /usr/share/elasticsearch/logs\n\t\t\n\tfi\n\techo \"chown duration: $(duration
      $chown_start) sec.\"\n\n\t######################\n\t#  Wait for certs    #\n\t######################\n\n\tINIT_CONTAINER_LOCAL_KEY_PATH=/mnt/elastic-internal/transport-certificates/${POD_NAME}.tls.key\n\n\t#
      wait for the transport certificates to show up\n\techo \"waiting for the transport
      certificates (${INIT_CONTAINER_LOCAL_KEY_PATH})\"\n\twait_start=$(date +%s)\n\twhile
      [ ! -f ${INIT_CONTAINER_LOCAL_KEY_PATH} ]\n\tdo\n\t  sleep 0.2\n\tdone\n\techo
      \"wait duration: $(duration wait_start) sec.\"\n\n\t######################\n\t#
      \ Certs linking     #\n\t######################\n\n\tKEY_SOURCE_PATH=/usr/share/elasticsearch/config/transport-certs/${POD_NAME}.tls.key\n\tKEY_TARGET_PATH=/mnt/elastic-internal/elasticsearch-config-local/node-transport-cert/transport.tls.key\n\n\tCERT_SOURCE_PATH=/usr/share/elasticsearch/config/transport-certs/${POD_NAME}.tls.crt\n\tCERT_TARGET_PATH=/mnt/elastic-internal/elasticsearch-config-local/node-transport-cert/transport.tls.crt\n\n\t#
      Link individual files from their mount location into the config dir\n\t# to
      a volume, to be used by the ES container\n\tln_start=$(date +%s)\n\n\techo \"Linking
      $CERT_SOURCE_PATH to $CERT_TARGET_PATH\"\n\tmkdir -p $(dirname $KEY_TARGET_PATH)\n\tln
      -sf $KEY_SOURCE_PATH $KEY_TARGET_PATH\n\techo \"Linking $CERT_SOURCE_PATH to
      $CERT_TARGET_PATH\"\n\tmkdir -p $(dirname $CERT_TARGET_PATH)\n\tln -sf $CERT_SOURCE_PATH
      $CERT_TARGET_PATH\n\n\techo \"Certs linking duration: $(duration $ln_start)
      sec.\"\n\n\t######################\n\t#         End        #\n\t######################\n\n\techo
      \"Init script successful\"\n\techo \"Script duration: $(duration $script_start)
      sec.\"\n"
    readiness-probe-script.sh: "#!/usr/bin/env bash\n\n# fail should be called as
      a last resort to help the user to understand why the probe failed\nfunction
      fail {\n  timestamp=$(date --iso-8601=seconds)\n  echo \"{\\\"timestamp\\\":
      \\\"${timestamp}\\\", \\\"message\\\": \\\"readiness probe failed\\\", \"$1\"}\"
      | tee /proc/1/fd/2 2> /dev/null\n  exit 1\n}\n\nlabels=\"/mnt/elastic-internal/downward-api/labels\"\n\nversion=\"\"\nif
      [[ -f \"${labels}\" ]]; then\n  # get Elasticsearch version from the downward
      API\n  version=$(grep \"elasticsearch.k8s.elastic.co/version\" ${labels} | cut
      -d '=' -f 2)\n  # remove quotes\n  version=$(echo \"${version}\" | tr -d '\"')\nfi\n\nREADINESS_PROBE_TIMEOUT=${READINESS_PROBE_TIMEOUT:=3}\n\n#
      Check if PROBE_PASSWORD_PATH is set, otherwise fall back to its former name
      in 1.0.0.beta-1: PROBE_PASSWORD_FILE\nif [[ -z \"${PROBE_PASSWORD_PATH}\" ]];
      then\n  probe_password_path=\"${PROBE_PASSWORD_FILE}\"\nelse\n  probe_password_path=\"${PROBE_PASSWORD_PATH}\"\nfi\n\n#
      setup basic auth if credentials are available\nif [ -n \"${PROBE_USERNAME}\"
      ] && [ -f \"${probe_password_path}\" ]; then\n  PROBE_PASSWORD=$(<${probe_password_path})\n
      \ BASIC_AUTH=\"-u ${PROBE_USERNAME}:${PROBE_PASSWORD}\"\nelse\n  BASIC_AUTH=''\nfi\n\n#
      Check if we are using IPv6\nif [[ $POD_IP =~ .*:.* ]]; then\n  LOOPBACK=\"[::1]\"\nelse
      \n  LOOPBACK=127.0.0.1\nfi\n\n# request Elasticsearch on /\n# we are turning
      globbing off to allow for unescaped [] in case of IPv6\nENDPOINT=\"${READINESS_PROBE_PROTOCOL:-https}://${LOOPBACK}:9200/\"\nORIGIN_HEADER=\"x-elastic-product-origin:
      cloud\"\nstatus=$(curl -o /dev/null -w \"%{http_code}\" --max-time ${READINESS_PROBE_TIMEOUT}
      -H \"${ORIGIN_HEADER}\" -XGET -g -s -k ${BASIC_AUTH} $ENDPOINT)\ncurl_rc=$?\n\nif
      [[ ${curl_rc} -ne 0 ]]; then\n  fail \"\\\"curl_rc\\\": \\\"${curl_rc}\\\"\"\nfi\n\n#
      ready if status code 200, 503 is tolerable if ES version is 6.x\nif [[ ${status}
      == \"200\" ]] || [[ ${status} == \"503\" && ${version:0:2} == \"6.\" ]]; then\n
      \ exit 0\nelse\n  fail \" \\\"status\\\": \\\"${status}\\\", \\\"version\\\":\\\"${version}\\\"
      \"\nfi\n"
    suspend.sh: |
      #!/usr/bin/env bash
      set -eu

      while [[ $(grep -Exc $HOSTNAME /mnt/elastic-internal/scripts/suspended_pods.txt) -eq 1 ]]; do
      echo Pod suspended via eck.k8s.elastic.co/suspend annotation
      sleep 10
      done
    suspended_pods.txt: ""
  kind: ConfigMap
  metadata:
    creationTimestamp: "2023-11-28T18:00:41Z"
    labels:
      common.k8s.elastic.co/type: elasticsearch
      elasticsearch.k8s.elastic.co/cluster-name: elasticsearch-es-scripts
    name: elasticsearch-es-scripts
    namespace: opr-develop
    ownerReferences:
    - apiVersion: elasticsearch.k8s.elastic.co/v1
      blockOwnerDeletion: true
      controller: true
      kind: Elasticsearch
      name: elasticsearch
      uid: fa65119f-aabd-4df2-923b-ee9e4a481662
    resourceVersion: "87336181"
    uid: 7b000556-8795-44bc-b84f-9e2028f5bfee
- apiVersion: v1
  data:
    unicast_hosts.txt: 10.42.1.216:9300
  kind: ConfigMap
  metadata:
    creationTimestamp: "2023-11-28T18:00:42Z"
    labels:
      common.k8s.elastic.co/type: elasticsearch
      elasticsearch.k8s.elastic.co/cluster-name: elasticsearch
    name: elasticsearch-es-unicast-hosts
    namespace: opr-develop
    ownerReferences:
    - apiVersion: elasticsearch.k8s.elastic.co/v1
      blockOwnerDeletion: true
      controller: true
      kind: Elasticsearch
      name: elasticsearch
      uid: fa65119f-aabd-4df2-923b-ee9e4a481662
    resourceVersion: "406677699"
    uid: 22b57433-a89f-42eb-8ea8-b480f1f59429
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIBeTCCAR+gAwIBAgIBADAKBggqhkjOPQQDAjAkMSIwIAYDVQQDDBlya2UyLXNl
      cnZlci1jYUAxNjkyMjQ5ODI4MB4XDTIzMDgxNzA1MjM0OFoXDTMzMDgxNDA1MjM0
      OFowJDEiMCAGA1UEAwwZcmtlMi1zZXJ2ZXItY2FAMTY5MjI0OTgyODBZMBMGByqG
      SM49AgEGCCqGSM49AwEHA0IABBiQppuhvxq1p9yNtlX1EMs5+xj6UNe2yJtIInQy
      oJq3nuONial1WLXMGWCtlfQ+iHSyBImzjlqUidpateX+0najQjBAMA4GA1UdDwEB
      /wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTfgp+LWQNU629czgAu
      mykGlRoZgTAKBggqhkjOPQQDAgNIADBFAiEAga45XbmpQV30MYfNIALfOtbp3amb
      xfHbMzqyltvHD10CIH9R6s836CMNu7iRo5QIhsG+sJGQ6TyrWk3hDzKhi572
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2023-08-17T07:35:14Z"
    name: kube-root-ca.crt
    namespace: opr-develop
    resourceVersion: "76381"
    uid: 794df568-ad70-4b7e-8f46-f21ebad157d1
- apiVersion: v1
  data:
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    OTEL_SERVICE_NAME: links
    REFLECT_COMPONENT: links
    REFLECT_ENVIRONMENT: Production
    REFLECTLINKS_LinkSharing__Domain: links-develop.opr.unity.com
    REFLECTLINKS_Prometheus__Enabled: "true"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-12-05T21:51:55Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: links
      helm.sh/chart: reflect-common-chart-1.0.0
    name: links-config
    namespace: opr-develop
    resourceVersion: "193319494"
    uid: 0708f208-4069-44dc-84a1-076fa8da382a
- apiVersion: v1
  data:
    ASPNETCORE_URLS: http://+:80
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    OTEL_SERVICE_NAME: matchmaker
    REFLECT_COMPONENT: matchmaker
    REFLECT_ENVIRONMENT: Production
    REFLECTMULTIPLAYER_ClusterController__AllocationPool__PoolSize: "0"
    REFLECTMULTIPLAYER_ClusterController__KubeApi__CertsSecretName: matchmaker-reflect-tls
    REFLECTMULTIPLAYER_ClusterController__KubeApi__Images__Init: us-east1-docker.pkg.dev/unity-solutions-tyndall-prd/docker/reflect-netcode-init:develop-latest
    REFLECTMULTIPLAYER_ClusterController__KubeApi__Images__Netcode: us-east1-docker.pkg.dev/unity-solutions-tyndall-prd/docker/reflect-netcode:develop-latest
    REFLECTMULTIPLAYER_ClusterController__KubeApi__KubeNamespace: opr-develop
    REFLECTMULTIPLAYER_ClusterController__KubeApi__KubeNodepool: 'kubernetes.io/os
      : linux'
    REFLECTMULTIPLAYER_ClusterController__KubeApi__MatchMakerEndpoint: matchmaker
    REFLECTMULTIPLAYER_ClusterController__KubeApi__Namespace: default
    REFLECTMULTIPLAYER_ClusterController__KubeApi__NetcodeServerAddress: develop.opr.unity.com
    REFLECTMULTIPLAYER_Mumble__OwnerManagerAclGroupName: OprOwnerManager
    REFLECTMULTIPLAYER_Mumble__RestApiUrl: http://mumble-rest.opr-develop.svc.cluster.local:8082
    REFLECTMULTIPLAYER_ProjectServer__Address: http://project:10010
    REFLECTMULTIPLAYER_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTMULTIPLAYER_Prometheus__Enabled: "true"
    REFLECTMULTIPLAYER_Sentry__Environment: gcp-test
    REFLECTMULTIPLAYER_Serilog__MinimumLevel__Default: Debug
    URLS: http://+:80
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-01-16T20:14:56Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: matchmaker
      helm.sh/chart: reflect-common-chart-1.0.0
    name: matchmaker-config
    namespace: opr-develop
    resourceVersion: "193319503"
    uid: d733c8bc-7129-480d-ae7a-1fdbeb6566b8
- apiVersion: v1
  data:
    APP_DEBUG: "False"
    APP_HOST: 0.0.0.0
    APP_PORT: "8082"
    AUTH_JWK_URL: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/certs
    AUTH_JWT_VALID_ISSUER: https://keycloak-develop.opr.unity.com/realms/reflect
    AUTH_NAME_CLAIM: preferred_username
    AUTH_UID_OFFSET: "1000"
    ENABLE_AUTH: "True"
    MURMUR_ICE_HOST: murmur.opr-develop.svc.cluster.local
    MURMUR_ICE_PORT: "6502"
    REFLECT_COMPONENT: mumble-rest
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-04-03T22:26:01Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mumble-rest
      helm.sh/chart: reflect-common-chart-2.0.5
    name: mumble-rest-config
    namespace: opr-develop
    resourceVersion: "199680585"
    uid: 1e8918f8-a834-4856-94d5-92563a10b239
- apiVersion: v1
  data:
    REFLECT_COMPONENT: murmur
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-04-03T22:26:01Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: murmur
      helm.sh/chart: reflect-common-chart-2.0.5
    name: murmur-config
    namespace: opr-develop
    resourceVersion: "199680589"
    uid: cfb5668d-e56e-4bec-9e3a-0cada8d269f0
- apiVersion: v1
  data:
    murmur.ini: |
      ; Murmur configuration file.
      ;
      ; General notes:
      ; * Settings in this file are default settings and many of them can be overridden
      ;   with virtual server specific configuration via the Ice or DBus interface.
      ; * Due to the way this configuration file is read some rules have to be
      ;   followed when specifying variable values (as in variable = value):
      ;     * Make sure to quote the value when using commas in strings or passwords.
      ;        NOT variable = super,secret BUT variable = "super,secret"
      ;     * Make sure to escape special characters like '\' or '"' correctly
      ;        NOT variable = """ BUT variable = "\""
      ;        NOT regex = \w* BUT regex = \\w*

      ; Path to database. If blank, will search for
      ; murmur.sqlite in default locations or create it if not found.
      database=/var/lib/murmur/murmur.sqlite

      ; Murmur defaults to using SQLite with its default rollback journal.
      ; In some situations, using SQLite's write-ahead log (WAL) can be
      ; advantageous.
      ; If you encounter slowdowns when moving between channels and similar
      ; operations, enabling the SQLite write-ahead log might help.
      ;
      ; To use SQLite's write-ahead log, set sqlite_wal to one of the following
      ; values:
      ;
      ; 0 - Use SQLite's default rollback journal.
      ; 1 - Use write-ahead log with synchronous=NORMAL.
      ;     If Murmur crashes, the database will be in a consistent state, but
      ;     the most recent changes might be lost if the operating system did
      ;     not write them to disk yet. This option can improve Murmur's
      ;     interactivity on busy servers, or servers with slow storage.
      ; 2 - Use write-ahead log with synchronous=FULL.
      ;     All database writes are synchronized to disk when they are made.
      ;     If Murmur crashes, the database will be include all completed writes.
      ;sqlite_wal=0

      ; If you wish to use something other than SQLite, you'll need to set the name
      ; of the database above, and also uncomment the below.
      ; Sticking with SQLite is strongly recommended, as it's the most well tested
      ; and by far the fastest solution.
      ;
      ;dbDriver=QMYSQL
      ;dbUsername=
      ;dbPassword=
      ;dbHost=
      ;dbPort=
      ;dbPrefix=murmur_
      ;dbOpts=

      database=Murmur
      dbDriver=QPSQL
      dbUsername=murmur_service
      dbPassword=reflect
      dbHost=opr-postgresql
      dbPort=5432
      dbPrefix=murmur_

      ; Murmur defaults to not using D-Bus. If you wish to use dbus, which is one of the
      ; RPC methods available in Murmur, please specify so here.
      ;
      ;dbus=session

      ; Alternate D-Bus service name. Only use if you are running distinct
      ; murmurd processes connected to the same D-Bus daemon.
      ;dbusservice=net.sourceforge.mumble.murmur

      ; If you want to use ZeroC Ice to communicate with Murmur, you need
      ; to specify the endpoint to use. Since there is no authentication
      ; with ICE, you should only use it if you trust all the users who have
      ; shell access to your machine.
      ; Please see the ICE documentation on how to specify endpoints.
      ice="tcp -h 0.0.0.0 -p 6502"

      ; Ice primarily uses local sockets. This means anyone who has a
      ; user account on your machine can connect to the Ice services.
      ; You can set a plaintext "secret" on the Ice connection, and
      ; any script attempting to access must then have this secret
      ; (as context with name "secret").
      ; Access is split in read (look only) and write (modify)
      ; operations. Write access always includes read access,
      ; unless read is explicitly denied (see note below).
      ;
      ; Note that if this is uncommented and with empty content,
      ; access will be denied.

      ;icesecretread=
      icesecretwrite=murmur-ice-secret-key

      ; If you want to expose Murmur's experimental gRPC API, you
      ; need to specify an address to bind on.
      ; Note: not all builds of Murmur support gRPC. If gRPC is not
      ; available, Murmur will warn you in its log output.
      ;grpc="127.0.0.1:50051"
      ; Specifying both a certificate and key file below will cause gRPC to use
      ; secured, TLS connections.
      ;grpccert=""
      ;grpckey=""

      ; Specifies the file Murmur should log to. By default, Murmur
      ; logs to the file 'murmur.log'. If you leave this field blank
      ; on Unix-like systems, Murmur will force itself into foreground
      ; mode which logs to the console.
      ;logfile=murmur.log

      ; If set, Murmur will write its process ID to this file
      ; when running in daemon mode (when the -fg flag is not
      ; specified on the command line). Only available on
      ; Unix-like systems.
      ;pidfile=

      ; The below will be used as defaults for new configured servers.
      ; If you're just running one server (the default), it's easier to
      ; configure it here than through D-Bus or Ice.
      ;
      ; Welcome message sent to clients when they connect.
      ; If the welcome message is set to an empty string,
      ; no welcome message will be sent to clients.
      welcometext="<br />Welcome to this server running <b>Murmur</b>.<br />Enjoy your stay!<br />"

      ; Port to bind TCP and UDP sockets to.
      port=64738

      ; Specific IP or hostname to bind to.
      ; If this is left blank (default), Murmur will bind to all available addresses.
      ;host=

      ; Password to join server.
      serverpassword=

      ; Maximum bandwidth (in bits per second) clients are allowed
      ; to send speech at.
      bandwidth=72000

      ; Murmur and Mumble are usually pretty good about cleaning up hung clients, but
      ; occasionally one will get stuck on the server. The timeout setting will cause
      ; a periodic check of all clients who haven't communicated with the server in
      ; this many seconds - causing zombie clients to be disconnected.
      ;
      ; Note that this has no effect on idle clients or people who are AFK. It will
      ; only affect people who are already disconnected, and just haven't told the
      ; server.
      ;timeout=30

      ; Maximum number of concurrent clients allowed.
      users=100

      ; Where users sets a blanket limit on the number of clients per virtual server,
      ; usersperchannel sets a limit on the number per channel. The default is 0, for
      ; no limit.
      ;usersperchannel=0

      ; Per-user rate limiting
      ;
      ; These two settings allow to configure the per-user rate limiter for some
      ; command messages sent from the client to the server. The messageburst setting
      ; specifies an amount of messages which are allowed in short bursts. The
      ; messagelimit setting specifies the number of messages per second allowed over
      ; a longer period. If a user hits the rate limit, his packages are then ignored
      ; for some time. Both of these settings have a minimum of 1 as setting either to
      ; 0 could render the server unusable.
      messageburst=5
      messagelimit=1

      ; Respond to UDP ping packets.
      ;
      ; Setting to true exposes the current user count, the maximum user count, and
      ; the server's maximum bandwidth per client to unauthenticated users. In the
      ; Mumble client, this information is shown in the Connect dialog.
      allowping=true

      ; Amount of users with Opus support needed to force Opus usage, in percent.
      ; 0 = Always enable Opus, 100 = enable Opus if it's supported by all clients.
      ;opusthreshold=100

      ; Maximum depth of channel nesting. Note that some databases like MySQL using
      ; InnoDB will fail when operating on deeply nested channels.
      ;channelnestinglimit=10

      ; Maximum number of channels per server. 0 for unlimited. Note that an
      ; excessive number of channels will impact server performance
      ;channelcountlimit=1000

      ; Regular expression used to validate channel names.
      ; (Note that you have to escape backslashes with \ )
      ;channelname=[ \\-=\\w\\#\\[\\]\\{\\}\\(\\)\\@\\|]+

      ; Regular expression used to validate user names.
      ; (Note that you have to escape backslashes with \ )
      ;username=[-=\\w\\[\\]\\{\\}\\(\\)\\@\\|\\.]+

      ; If a user has no stored channel (they've never been connected to the server
      ; before, or rememberchannel is set to false) and the client hasn't been given
      ; a URL that includes a channel path, the default behavior is that they will
      ; end up in the root channel.
      ;
      ; You can set this setting to a channel ID, and the user will automatically be
      ; moved into that channel instead. Note that this is the numeric ID of the
      ; channel, which can be a little tricky to get (you'll either need to use an
      ; RPC mechanism, watch the console of a debug client, or root around through
      ; the Murmur Database to get it).
      ;
      ;defaultchannel=0

      ; When a user connects to a server they've already been on, by default the
      ; server will remember the last channel they were in and move them to it
      ; automatically. Toggling this setting to false will disable that feature.
      ;
      ;rememberchannel=true

      ; Maximum length of text messages in characters. 0 for no limit.
      ;textmessagelength=5000

      ; Maximum length of text messages in characters, with image data. 0 for no limit.
      ;imagemessagelength=131072

      ; Allow clients to use HTML in messages, user comments and channel descriptions?
      ;allowhtml=true

      ; Murmur retains the per-server log entries in an internal database which
      ; allows it to be accessed over D-Bus/ICE.
      ; How many days should such entries be kept?
      ; Set to 0 to keep forever, or -1 to disable logging to the DB.
      ;logdays=31

      ; To enable public server registration, the serverpassword must be blank, and
      ; this must all be filled out.
      ; The password here is used to create a registry for the server name; subsequent
      ; updates will need the same password. Don't lose your password.
      ; The URL is your own website, and only set the registerHostname for static IP
      ; addresses.
      ; Location is typically the country of typical users of the server, in
      ; two-letter TLD style (ISO 3166-1 alpha-2 country code)
      ;
      ; If you only wish to give your "Root" channel a custom name, then only
      ; uncomment the 'registerName' parameter.
      ;
      ;registerName=Mumble Server
      ;registerPassword=secret
      ;registerUrl=http://www.mumble.info/
      ;registerHostname=
      ;registerLocation=

      ; If this option is enabled, the server will announce its presence via the
      ; bonjour service discovery protocol. To change the name announced by bonjour
      ; adjust the registerName variable.
      ; See http://developer.apple.com/networking/bonjour/index.html for more information
      ; about bonjour.
      ;bonjour=True

      ; If you have a proper SSL certificate, you can provide the filenames here.
      ; Otherwise, Murmur will create its own certificate automatically.
      sslCert=/etc/opr/murmur-cert/tls.crt
      sslKey=/etc/opr/murmur-cert/tls.key

      ; If the keyfile specified above is encrypted with a passphrase, you can enter
      ; it in this setting. It must be plaintext, so you may wish to adjust the
      ; permissions on your murmur.ini file accordingly.
      ;sslPassPhrase=

      ; If your certificate is signed by an authority that uses a sub-signed or
      ; "intermediate" certificate, you probably need to bundle it with your
      ; certificate in order to get Murmur to accept it. You can either concatenate
      ; the two certificates into one file, or you can put it in a file by itself and
      ; put the path to that PEM-file in sslCA.
      ;sslCA=

      ; The sslDHParams option allows you to specify a PEM-encoded file with
      ; Diffie-Hellman parameters, which will be used as the default Diffie-
      ; Hellman parameters for all virtual servers.
      ;
      ; Instead of pointing sslDHParams to a file, you can also use the option
      ; to specify a named set of Diffie-Hellman parameters for Murmur to use.
      ; Murmur comes bundled with the Diffie-Hellman parameters from RFC 7919.
      ; These parameters are available by using the following names:
      ;
      ; @ffdhe2048, @ffdhe3072, @ffdhe4096, @ffdhe6144, @ffdhe8192
      ;
      ; By default, Murmur uses @ffdhe2048.
      ;sslDHParams=@ffdhe2048

      ; The sslCiphers option chooses the cipher suites to make available for use
      ; in SSL/TLS. This option is server-wide, and cannot be set on a
      ; per-virtual-server basis.
      ;
      ; This option is specified using OpenSSL cipher list notation (see
      ; https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT).
      ;
      ; It is recommended that you try your cipher string using 'openssl ciphers <string>'
      ; before setting it here, to get a feel for which cipher suites you will get.
      ;
      ; After setting this option, it is recommend that you inspect your Murmur log
      ; to ensure that Murmur is using the cipher suites that you expected it to.
      ;
      ; Note: Changing this option may impact the backwards compatibility of your
      ; Murmur server, and can remove the ability for older Mumble clients to be able
      ; to connect to it.
      ;sslCiphers=EECDH+AESGCM:EDH+aRSA+AESGCM:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:AES256-SHA:AES128-SHA

      ; If Murmur is started as root, which user should it switch to?
      ; This option is ignored if Murmur isn't started with root privileges.
      ;uname=

      ; By default, in log files and in the user status window for privileged users,
      ; Mumble will show IP addresses - in some situations you may find this unwanted
      ; behavior. If obfuscate is set to true, Murmur will randomize the IP addresses
      ; of connecting users.
      ;
      ; The obfuscate function only affects the log file and DOES NOT effect the user
      ; information section in the client window.
      ;obfuscate=false

      ; If this options is enabled, only clients which have a certificate are allowed
      ; to connect.
      ;certrequired=False

      ; If enabled, clients are sent information about the servers version and operating
      ; system.
      ;sendversion=True

      ; You can set a recommended minimum version for your server, and clients will
      ; be notified in their log when they connect if their client does not meet the
      ; minimum requirements. suggestVersion expects the version in the format X.X.X.
      ;
      ; Note that the suggest* options appeared after 1.2.3 and will have no effect
      ; on client versions 1.2.3 and earlier.
      ;
      ;suggestVersion=

      ; Setting this to "true" will alert any user who does not have positional audio
      ; enabled that the server administrators recommend enabling it. Setting it to
      ; "false" will have the opposite effect - if you do not care whether the user
      ; enables positional audio or not, set it to blank. The message will appear in
      ; the log window upon connection, but only if the user's settings do not match
      ; what the server requests.
      ;
      ; Note that the suggest* options appeared after 1.2.3 and will have no effect
      ; on client versions 1.2.3 and earlier.
      ;
      ;suggestPositional=

      ; Setting this to "true" will alert any user who does not have Push-To-Talk
      ; enabled that the server administrators recommend enabling it. Setting it to
      ; "false" will have the opposite effect - if you do not care whether the user
      ; enables PTT or not, set it to blank. The message will appear in the log
      ; window upon connection, but only if the user's settings do not match what the
      ; server requests.
      ;
      ; Note that the suggest* options appeared after 1.2.3 and will have no effect
      ; on client versions 1.2.3 and earlier.
      ;
      ;suggestPushToTalk=

      ; This sets password hash storage to legacy mode (1.2.4 and before)
      ; (Note that setting this to true is insecure and should not be used unless absolutely necessary)
      ;legacyPasswordHash=false

      ; By default a strong amount of PBKDF2 iterations are chosen automatically. If >0 this setting
      ; overrides the automatic benchmark and forces a specific number of iterations.
      ; (Note that you should only change this value if you know what you are doing)
      ;kdfIterations=-1

      ; In order to prevent misconfigured, impolite or malicious clients from
      ; affecting the low-latency of other users, Murmur has a rudimentary global-ban
      ; system. It's configured using the autobanAttempts, autobanTimeframe and
      ; autobanTime settings.
      ;
      ; If a client attempts autobanAttempts connections in autobanTimeframe seconds,
      ; they will be banned for autobanTime seconds. This is a global ban, from all
      ; virtual servers on the Murmur process. It will not show up in any of the
      ; ban-lists on the server, and they can't be removed without restarting the
      ; Murmur process - just let them expire. A single, properly functioning client
      ; should not trip these bans.
      ;
      ; To disable, set autobanAttempts or autobanTimeframe to 0. Commenting these
      ; settings out will cause Murmur to use the defaults:
      ;
      ;autobanAttempts=10
      ;autobanTimeframe=120
      ;autobanTime=300

      ; You can configure any of the configuration options for Ice here. We recommend
      ; leave the defaults as they are.
      ; Please note that this section has to be last in the configuration file.
      ;
      [Ice]
      Ice.Warn.UnknownProperties=1
      Ice.MessageSizeMax=65536
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-01-18T19:34:54Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: murmur-files
    namespace: opr-develop
    resourceVersion: "198868626"
    uid: 787416f3-a2bf-421c-9f90-101375457447
- apiVersion: v1
  data:
    job.yml: |
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: netcode-job-{{ Ident }}
        namespace: {{ Namespace }}
      spec:
        template:
          metadata:
            labels:
              app: netcode-job-{{ Ident }}
          spec:
            restartPolicy: Never
            nodeSelector:
              {{ NodeSelector }}
            serviceAccountName: netcode-sa
            volumes:
            - name: netcode-config
              emptyDir: {}
            initContainers:
              - name: netcode-init
                image: {{ InitImage }}
                imagePullPolicy: "Always"
                volumeMounts:
                - name: netcode-config
                  mountPath: /etc/reflect
                env:
                    - name: REFLECT_NETCODE_NODE_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    - name: CERTS_SECRET_NAME
                      value: {{ CertsSecretName }}
                    - name: REFLECT_SENTRY_DSN
                      value: {{ SentryDSN }}
                    - name: NAMESPACE
                      value: {{ Namespace }}
            imagePullSecrets:
              - name: regcred-gcp
            containers:
              - name: netcode-server
                image: {{ NetcodeImage }}
                imagePullPolicy: "Always"
                ports:
                  - containerPort: 30303
                    name: mlapi
                    protocol: UDP
                env:
                    - name: REFLECT_NETCODE_NODE_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    - name: REFLECT_NETCODE_POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: MATCHMAKER_ENABLE
                      value: "true"
                    - name: MATCHMAKER_HOST
                      value: {{ MatchMakerEndpoint }}
                    - name: MATCHMAKER_PORT
                      value: "10042"
                    - name: REFLECT_NETCODE_IP
                      value: {{ NetcodeServerAddress }}
                    - name: REFLECT_SENTRY_DSN
                      value: {{ SentryDSN }}
                volumeMounts:
                - name: netcode-config
                  mountPath: /etc/reflect
                resources:
                  requests:
                    memory: "400Mi"
                    cpu: "2000m"
                  limits:
                    memory: "800Mi"
                    cpu: "2000m"
    service.yml: |
      apiVersion: v1
      kind: Service
      metadata:
        name: netcode-svc-{{ Ident }}
        namespace: {{ Namespace }}
        labels:
          app: netcode-svc-{{ Ident }}
          reflectComponent: netcode
      spec:
        type: NodePort
        selector:
          app: netcode-job-{{ Ident }}
        ports:
          - port: 30303
            targetPort: mlapi
            name: mlapi
            protocol: UDP
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-01-15T18:42:03Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: netcode-manifests
    namespace: opr-develop
    resourceVersion: "149706419"
    uid: 077fdaa9-3f87-4f55-a7f7-8b630ddffce0
- apiVersion: v1
  data:
    keycloak.cli: |
      embed-server --server-config=standalone-ha.xml --std-out=echo
      batch

      echo Configuring node identifier

      ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
      ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
      /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})

      echo Finished configuring node identifier

      run-batch
      stop-embedded-server
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2024-01-16T18:28:45Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/version: 21.1.2
      helm.sh/chart: keycloak-18.4.3
    name: opr-keycloak-startup
    namespace: opr-develop
    resourceVersion: "130518299"
    uid: 6fae1b61-8970-46b8-9786-c333b1d92372
- apiVersion: v1
  data:
    override.conf: max_connections = 400
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-11-09T01:08:04Z"
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      helm.sh/chart: postgresql-12.8.0
    name: opr-postgresql-extended-configuration
    namespace: opr-develop
    resourceVersion: "70529980"
    uid: 51a9f051-1a21-4ad8-8eb7-b8d1ffc40198
- apiVersion: v1
  data:
    ASPNETCORE_ENVIRONMENT: Production
    ASPNETCORE_URLS: http://+:80
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    OTEL_SERVICE_NAME: project
    REFLECT_CLOUD: OnPrem
    REFLECT_COMPONENT: project
    REFLECT_DOMAIN: BAH OPR
    REFLECT_ENVIRONMENT: Production
    REFLECT_GATEWAY: unity.project-service.local
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTPROJECT_LinkSharing__Domain: https://links-develop.opr.unity.com
    REFLECTPROJECT_LinkSharing__Path: p/
    REFLECTPROJECT_Prometheus__Enabled: "true"
    REFLECTPROJECT_Security__LicenseValidationStartDate: "2019-11-01T00:00:00Z"
    REFLECTPROJECT_Security__OnPrem__AuthorizeEndpoint: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/auth
    REFLECTPROJECT_Security__OnPrem__ClientId: reflect
    REFLECTPROJECT_Security__OnPrem__ClientIdClaim: azp
    REFLECTPROJECT_Security__OnPrem__Domain: BAH OPR
    REFLECTPROJECT_Security__OnPrem__NameClaim: preferred_username
    REFLECTPROJECT_Security__OnPrem__OAuthJwkUrl: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/certs
    REFLECTPROJECT_Security__OnPrem__OrganizationName: Tyndall Air Force Base
    REFLECTPROJECT_Security__OnPrem__RealmAccessRoleListOwnerOrManagerRole: ReflectOwnerManagerRole
    REFLECTPROJECT_Security__OnPrem__RealmAccessRoleListUserRole: ReflectUserRole
    REFLECTPROJECT_Security__OnPrem__RefreshEndpoint: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/token
    REFLECTPROJECT_Security__OnPrem__RevokeEndpoint: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/revoke
    REFLECTPROJECT_Security__OnPrem__Scope: openid
    REFLECTPROJECT_Security__OnPrem__TokenEndpoint: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/token
    REFLECTPROJECT_Security__OnPrem__UserInfoEndpoint: https://keycloak-develop.opr.unity.com/realms/reflect/protocol/openid-connect/userinfo
    REFLECTPROJECT_Security__OnPrem__ValidIssuer: https://keycloak-develop.opr.unity.com/realms/reflect
    REFLECTPROJECT_Security__OnPrem__ViewerProtocol: reflect
    REFLECTPROJECT_Security__TokenManager__Certificates__Folder: /app/Server/Security/Authentication
    REFLECTPROJECT_ServerEndpoint__Host: 0.0.0.0
    REFLECTPROJECT_ServiceEndpoints__Annotations__HttpAddress: https://annotations-develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__MatchMaker__GrpcAddress: https://matchmaker-develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__MatchMaker__HttpAddress: https://matchmaker-develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__ProjectServer__GrpcAddress: https://develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__ProjectServer__GrpcWebAddress: https://web-develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTPROJECT_ServiceEndpoints__VoipServer__OtherServerAddress: mumble://voip-develop.opr.unity.com:30000
    REFLECTPROJECT_SyncServer__Cloud__Address: https://sync-develop.opr.unity.com
    REFLECTPROJECT_SyncServer__Cloud__SupportsDecimation: "true"
    URLS: http://+:80
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: project
      helm.sh/chart: reflect-common-chart-1.0.0
    name: project-config
    namespace: opr-develop
    resourceVersion: "193319516"
    uid: e61ee901-1f25-4aaa-af0c-750125d671c4
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_Logging__LogLevel__Default: Debug
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_Server__MaxSendMessageLengthMb: "512"
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-11-28T19:17:55Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-api
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-api-config
    namespace: opr-develop
    resourceVersion: "193319517"
    uid: d7e22f4d-f0e2-47dd-a817-cb46eab3a8db
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-decimator__ClientCount: "1"
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-decimator__MaxOutstandingElements: "128"
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_PixyzOptimizeSdk__LicenseFilePath: /app/licenses/license
    REFLECTSYNC_PixyzOptimizeSdk__LogFileBasePath: /app/log/pixyz
    REFLECTSYNC_PixyzOptimizeSdk__MaxThreads: "8"
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-decimator
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-decimator-config
    namespace: opr-develop
    resourceVersion: "198651427"
    uid: 89e461ad-6c21-4717-92ee-0ddd4b068951
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-hlodbuilder__ClientCount: "1"
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-hlodbuilder__MaxOutstandingElements: "2"
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_PixyzOptimizeSdk__LicenseFilePath: /app/licenses/license
    REFLECTSYNC_PixyzOptimizeSdk__LogFileBasePath: /app/pixyzlog/pixyz
    REFLECTSYNC_PixyzProcessPool__MaxSubProcessCount: "1"
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-hlodbuilder
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-hlodbuilder-config
    namespace: opr-develop
    resourceVersion: "198652765"
    uid: 99fdcae4-d6df-4995-8e5a-c85fcc914009
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_Logging__Serilog__MinimumLevel__Default: Debug
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-default__ClientCount: "2"
    REFLECTSYNC_MessageBroker__GcpPubSub__Listeners__sync-sessions-default__MaxOutstandingElements: "128"
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-modelprocessor
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-modelprocessor-config
    namespace: opr-develop
    resourceVersion: "198690227"
    uid: ba9e092d-a4d3-4e66-bc0a-758b7ce71c48
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_PixyzOptimizeSdk__LicenseFilePath: /app/licenses/license
    REFLECTSYNC_PixyzOptimizeSdk__LogFileBasePath: /app/pixyzlog/pixyz
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-modelprocessor-safemode
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-modelprocessor-safemode-config
    namespace: opr-develop
    resourceVersion: "198652869"
    uid: 0f216a14-ddde-4ff6-a6d0-8d9c74879ca1
- apiVersion: v1
  data:
    REFLECT_COMPONENT: sync-tests
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-test-runner
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-testrunner-config
    namespace: opr-develop
    resourceVersion: "51824835"
    uid: bd176042-9487-4052-a006-977c829c89f2
- apiVersion: v1
  data:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/storage/credentials.json
    OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server-apm-http:8200
    OTEL_EXPORTER_OTLP_HEADERS: Authorization=Bearer 4113wNO7AFYO336Yn3vj2yvP
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production
    REFLECT_COMPONENT: sync
    REFLECT_ENVIRONMENT: Production
    REFLECT_TESTRUNNER_WAIT: "1"
    REFLECTSYNC_HttpServer__ExceptionContextResponseEnabled: "true"
    REFLECTSYNC_Kestrel__EndpointDefaults__Protocols: Http1AndHttp2
    REFLECTSYNC_MessageBroker__Backend: MassTransit
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__HostName: opr-rabbitmq
    REFLECTSYNC_MessageBroker__MassTransit__RabbitMq__SyncSessionTopicId: sync-sessions
    REFLECTSYNC_MessageBroker__MassTransit__Transport: RabbitMQ
    REFLECTSYNC_PixyzOptimizeSdk__Enabled: "false"
    REFLECTSYNC_ProjectMetadata__Backend: Database
    REFLECTSYNC_ProjectServer__Address: https://web-develop.opr.unity.com
    REFLECTSYNC_ProjectServer__HttpAddress: https://develop.opr.unity.com
    REFLECTSYNC_SessionManager__MaxWorkers: "8"
    REFLECTSYNC_Storage__Backend: Bucket
    REFLECTSYNC_Storage__Bucket__BucketName__Default: sync-service-dev
    REFLECTSYNC_Storage__Bucket__IntermediateStorage__Root: /storage
    REFLECTSYNC_Storage__Bucket__ProviderName: AWS
    REFLECTSYNC_Storage__Bucket__ProviderUrl: https://minio-api-develop.opr.unity.com
    REFLECTSYNC_Storage__Bucket__RetryPolicy__InitialDelay: "00:00:01"
    REFLECTSYNC_Storage__Bucket__RetryPolicy__MaxRetries: "10"
    REFLECTSYNC_Swagger__Enabled: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: opr
      meta.helm.sh/release-namespace: opr-develop
    creationTimestamp: "2023-10-17T19:31:59Z"
    labels:
      app.kubernetes.io/instance: opr
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sync-worker
      helm.sh/chart: reflect-common-chart-1.0.0
    name: sync-worker-config
    namespace: opr-develop
    resourceVersion: "193319532"
    uid: 2883bd56-bdfb-420e-9c0e-517a453ee375
kind: List
metadata:
  resourceVersion: ""
